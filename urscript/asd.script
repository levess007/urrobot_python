def asd():
  step_count_b1901595_3830_4c99_beaa_91b8310f6008 = 0.0
  thread Step_Counter_Thread_5b0667e8_522d_463c_9bf8_365befc93401():
    while (True):
      step_count_b1901595_3830_4c99_beaa_91b8310f6008 = step_count_b1901595_3830_4c99_beaa_91b8310f6008 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_5b0667e8_522d_463c_9bf8_365befc93401()
  set_tcp(p[0.0,0.0,0.187,0.0,0.0,0.0])
  set_payload(0.0, [0.0, 0.0, 0.187])
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global Pallet_1_cnt=1
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.1, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: OnRobot, 5.2.0, OnRobot A/S
  #   Type: OnRobot Setup
  on_robot_type = 3
  on_robot_cycle = 2.0
  on_device_ip = "10.6.6.11"
  on_device_socket_port = 51234
  on_xmlrpc = rpc_factory("xmlrpc", "http://10.6.6.11:41414")
  on_RPC = rpc_factory("xmlrpc", "http://127.0.0.1:31416")
  ON_DEBUG_LOG = False
  on_isMetric = True
  on_toolConnector = False
  on_ioqc = False
  on_dual = False
  on_ft = True
  on_hex = False
  on_gecko = 0
  cb_robot_cycle = 8
  on_gripper = [False, False, False]
  on_gripper[0] = True
  #======    OnRobot Globals    ======#
  
  ON_MATH_PI=3.141593
  ON_ZEROPOSE=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZEROFRAME=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO3D=[0.0,0.0,0.0]
  ON_ZERO6D=[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO8D=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
  ON_FALSE3D=[False,False,False]
  ON_FALSE6D=[False,False,False,False,False,False]
  ON_FALSE8D=[False,False,False,False,False,False,False,False]
  global on_return=0
  on_speedL=ON_ZERO6D
  on_speedBase=ON_ZERO6D
  on_speedVect=ON_ZERO6D
  on_speedExtra=ON_ZERO6D
  on_speedDC=ON_ZERO6D
  on_speedGecko=ON_ZERO6D
  on_floatRegShift=24
  on_intRegShift=24
  on_boolRegShift=64
  ON_BASE_SHIFT_FLOAT=24
  ON_BASE_SHIFT_INT=24
  ON_BASE_SHIFT_BOOL=64
  ON_DEVICE_SHIFT_FLOAT=3
  ON_DEVICE_SHIFT_INT=2
  ON_DEVICE_SHIFT_BOOL=7
  ON_COMMON_SHIFT_FLOAT=12
  ON_COMMON_SHIFT_INT=3
  ON_COMMON_SHIFT_BOOL=1
  ON_DI_SINGLE=0
  ON_DI_PRIMARY=1
  ON_DI_SECONDARY=2
  ON_DI_DUAL=3
  ON_DEVICE_ID_MISSING=0
  ON_INIT_TIMEOUT=500
  on_robot_TCP_offset=ON_ZEROFRAME
  on_tcp_offset_actual=ON_ZEROFRAME
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_robot_mount=[0.0,0.0]
  
  #======    End of OnRobot Globals    ======#
  #======    OnRobot FT Globals    ======#
  
  global F3D=0
  global T3D=0
  global FT_Base=[0,0,0,0,0,0]
  global FT_Tool=[0,0,0,0,0,0]
  def get_F3D():
  return F3D
  end 
  def get_T3D():
  return T3D
  end 
  def get_FT_Base():
  return FT_Base
  end 
  def get_FT_Tool():
  return FT_Tool
  end 
  ft_parent_ft_move_frameID=0
  ft_parent_ft_move_frame=ON_ZEROFRAME
  
  #======    End of OnRobot FT Globals    ======#
  #======    OnRobot RG2-FT Globals    ======#
  
  global FT_Left=[0,0,0,0,0,0]
  global FT_Right=[0,0,0,0,0,0]
  global F3D_Left=0
  global F3D_Right=0
  global T3D_Left=0
  global T3D_Right=0
  global Proximity_Left=0
  global Proximity_Right=0
  global Width=0
  global Part_Width=0
  rg2ft_Prox_left=0
  rg2ft_Prox_right=0
  rg2ft_Width=0
  rg2ft_Part_width=0
  FT_Mixed=[0,0,0,0,0,0]
  ft_compute_engine_ping=0
  ft_compute_engine_ping_max=0
  ft_Engine_state=0
  ft_Sensor_ID=0
  ft_has_valid_ID=False
  rg2ft_Gyro=[0,0,0]
  rg2ft_Stopped=False
  rg2ft_Gripped=False
  rg2ft_FGrip_detected=False
  rg2ft_FGrip_lost=False
  rg2ft_FGripped=False
  rg2ft_Slip_alert=False
  rg2ft_Part_weight=0
  rg2ft_Status_left=0
  rg2ft_Status_right=0
  rg2ft_Status_backpack=0
  rg2ft_qc_offset=p[0,0,0,0,0,0]
  rg2ft_bracket_offset=p[0,0,0,0,0,0]
  rg2ft_mount_offset=p[0,0,0,0,0,0]
  rg2ft_mounted_mass=0
  rg2ft_mounted_cog=p[0,0,0,0,0,0]
  def get_FT_Left():
  return FT_Left
  end 
  def get_FT_Right():
  return FT_Right
  end 
  def get_F3D_Left():
  return F3D_Left
  end 
  def get_F3D_Right():
  return F3D_Right
  end 
  def get_T3D_Left():
  return T3D_Left
  end 
  def get_T3D_Right():
  return T3D_Right
  end 
  def get_Proximity_Left():
  return Proximity_Left
  end 
  def get_Proximity_Right():
  return Proximity_Right
  end 
  def get_Width():
  return Width
  end 
  def get_Part_Width():
  return Part_Width
  end 
  
  #======    End of OnRobot RG2-FT Globals    ======#
  #======    OnRobot Interface Messages    ======#
  
  on_devices_primary_log="OnRobot Devices"
  on_devices_secondary_log="OnRobot Secondary Device"
  on_device_error_title="OnRobot - Device error"
  on_install_error="OnRobot Setup is not correct.<br>Check the status in the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_device_missing="No device connected.<br>Program halted."
  ft_device_missing="No OnRobot F/T sensor connected.<br>Program halted."
  rg2ft_device_missing="No RG2-FT gripper connected.<br>Program halted."
  rg_device_missing="No RG gripper connected.<br>Program halted."
  vg_device_missing="No VG gripper connected.<br>Program halted."
  gg_device_missing="No Gecko Gripper connected.<br>Program halted."
  sg_device_missing="No Soft Gripper connected.<br>Program halted."
  tfg_device_missing="No 3FG gripper connected.<br>Program halted."
  on_xmlrpc_start_ip="Connecting to OnRobot XML-RPC Server:"
  on_java_comm_error_textmsg_title="OnRobot - Communication error:"
  on_java_comm_controlsocket_open_error="Socket 'javaSocket' opening was unsuccessful."
  on_java_comm_error_title="OnRobot - Communication error"
  on_java_comm_socket_open_error="Establishing connection with the URCap was timed out.<br>Check the status in the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_rtde_feed_error_textmsg_title="OnRobot - Communication error:"
  on_rtde_feed_open_error_textmsg="Socket 'rtdeFeed' opening was unsuccessful."
  on_rtde_feed_error_title="OnRobot - Communication error"
  on_rtde_feed_open_error="Establishing connection with the devices was timed out.<br>Ensure that the OnRobot devices are operational, and check the status in the OnRobot Setup page in the Installation Tab."
  
  #======    End of OnRobot Interface Messages    ======#
  #======    OnRobot Interface    ======#
  
  on_portopened_javaSocket=False
  on_rtde_feed_opened=False
  on_dataRead_running=False
  FT_SENSOR_ID_UNDEFINED=0
  FT_SENSOR_ID_UNKNOWN=1
  FT_SENSOR_ID_HEX_V1=11
  FT_SENSOR_ID_HEX_V2=12
  FT_SENSOR_ID_HEX_V3=13
  FT_SENSOR_ID_RG2FT_V0=20
  FT_SENSOR_ID_RG2FT_V1=21
  FT_SENSOR_ID_RG2FT_V2=22
  def on_error(status_flag,message,title,stop_var=False):
  if(status_flag):
  popup(message,title=title,error=True,blocking=False)
  stop_var=True
  end 
  return stop_var
  end 
  def on_warning(status_flag,message,title):
  if(status_flag):
  textmsg(title,message)
  end 
  end 
  def on_missing():
  popup(on_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def ft_missing():
  popup(ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg2ft_missing():
  popup(rg2ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg_missing():
  popup(rg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vg_missing():
  popup(vg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def gg_missing():
  popup(gg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sg_missing():
  popup(sg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def tfg_missing():
  popup(tfg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def on_portclose_javaSocket():
  socket_close("javaSocket")
  on_portopened_javaSocket=False
  end 
  def on_portopen_javaSocket():
  on_portclose_javaSocket()
  on_portopened_javaSocket=socket_open("127.0.0.1",44005,"javaSocket")
  if not on_portopened_javaSocket:
  textmsg(on_java_comm_error_textmsg_title,on_java_comm_controlsocket_open_error)
  popup(on_java_comm_socket_open_error,title=on_java_comm_error_title,error=True,blocking=False)
  halt
  end 
  end 
  def on_rtde_feed_close():
  socket_close("rtdeFeed")
  on_rtde_feed_opened=False
  end 
  def on_rtde_feed_open():
  on_rtde_feed_close()
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  if not on_rtde_feed_opened:
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  end 
  if not on_rtde_feed_opened:
  textmsg(on_rtde_feed_error_textmsg_title,on_rtde_feed_open_error_textmsg)
  popup(on_rtde_feed_open_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  halt
  end 
  end 
  def on_dataRead():
  enter_critical
  floatRegDummy=read_input_float_register(0+on_floatRegShift)
  on_speedVect[0]=floatRegDummy/1000.0 
  floatRegDummy=read_input_float_register(1+on_floatRegShift)
  on_speedVect[1]=floatRegDummy/1000.0 
  floatRegDummy=read_input_float_register(2+on_floatRegShift)
  on_speedVect[2]=floatRegDummy/1000.0 
  floatRegDummy=read_input_float_register(3+on_floatRegShift)
  on_speedVect[3]=floatRegDummy
  floatRegDummy=read_input_float_register(4+on_floatRegShift)
  on_speedVect[4]=floatRegDummy
  floatRegDummy=read_input_float_register(5+on_floatRegShift)
  on_speedVect[5]=floatRegDummy
  exit_critical
  end 
  def on_set_rtde_watchdog(updateHz=5,ftWD=False,gripperWD=-1):
  local update_str=str_cat(" watchdog set to [Hz]: ",updateHz)
  if ftWD:
  watchdog_int_reg_str=str_cat("input_int_register_",0+on_intRegShift)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  if not(gripperWD<0):
  if(gripperWD==ON_DI_SINGLE or gripperWD==ON_DI_PRIMARY or gripperWD==ON_DI_DUAL):
  watchdog_int_reg_str=str_cat("input_int_register_",3+on_intRegShift)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  if(gripperWD==ON_DI_SECONDARY or gripperWD==ON_DI_DUAL):
  watchdog_int_reg_str=str_cat("input_int_register_",ON_DEVICE_SHIFT_INT+3+on_intRegShift)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  end 
  end 
  def on_speedVect_get():
  return[on_speedVect[0],on_speedVect[1],on_speedVect[2],on_speedVect[3],on_speedVect[4],on_speedVect[5]]
  end 
  def on_speedDC_get():
  local speedExtra=ON_ZERO6D
  if on_speedl_for_depthcompensation:
  speedExtra=[on_speedDC[0],on_speedDC[1],on_speedDC[2],on_speedDC[3],on_speedDC[4],on_speedDC[5]]
  end 
  return speedExtra
  end 
  def on_speedDC_set(speedDC):
  on_speedDC=[speedDC[0],speedDC[1],speedDC[2],speedDC[3],speedDC[4],speedDC[5]]
  end 
  def on_speedGecko_get():
  local speedExtra=ON_ZERO6D
  if on_speedl_for_gecko:
  speedExtra=[on_speedGecko[0],on_speedGecko[1],on_speedGecko[2],on_speedGecko[3],on_speedGecko[4],on_speedGecko[5]]
  end 
  return speedExtra
  end 
  def on_speedGecko_set(speedGecko):
  on_speedGecko=[speedGecko[0],speedGecko[1],speedGecko[2],speedGecko[3],speedGecko[4],speedGecko[5]]
  end 
  thread on_dataRead_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting on_dataRead thread")
  end 
  while on_dataRead_running:
  sync()
  on_dataRead()
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping on_dataRead thread")
  end 
  end 
  
  #======    End of OnRobot Interface    ======#
  #======    OnRobot QC Setup Tool Connector    ======#
  
  def tc_setup_tool():
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector start...")
  end 
  set_tool_voltage(24)
  
  set_tool_communication(True,1000000,2,1,1.5,3.5)
  
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector end.")
  end 
  end 
  
  #======    End of OnRobot QC Setup Tool Connector    ======#
  
  #======    End of OnRobot CB Interface Messages    ======#
  
  #======    End of OnRobot CB Interface    ======#
  #======    OnRobot FT Interface Messages    ======#
  
  ft_ce_comm_cmd_send_error="Command sending to the Compute Box failed. Resending. Command:"
  ft_ce_comm_cmd_send_again="Try to send command again.."
  ft_ce_comm_int_send_error="Integer sending to the Compute Box failed. Resending. Integer:"
  ft_ce_comm_int_send_again="Try to send int again.."
  ft_ce_comm_float_send_error="Float sending to the Compute Box failed. Resending. Float:"
  ft_ce_comm_float_send_again="Try to send float as int again.."
  ft_ce_comm_dummy_send_error="Dummy sending to the Compute Box failed. Resending. [Counter, out of]:"
  ft_ce_comm_dummy_send_again="Try to send dummy again.."
  ft_cmd_error_title="OnRobot - Command error"
  ft_cmd_rx_invalid_id="Invalid Command ID"
  ft_cmd_rx_wrong_state="Wrong command state."
  ft_cmd_rx_error_length="Unknown command-length received:"
  of_float_to_int_overflow="Float to int overflow!"
  of_float_to_int_underflow="Float to int underflow!"
  
  #======    End of OnRobot FT Interface Messages    ======#
  #======    OnRobot FT Interface    ======#
  
  FT_DEBUG_CMD=False
  FT_DEBUG_TX=False
  FT_DEBUG_RX=False
  FT_DEBUG_VAR=False
  ft_compute_engine_ping=0
  ft_compute_engine_ping_max=0
  ft_dataRead_running=False
  ft_dataProcess_running=False
  ft_cmd_received=0 
  ft_cmd_state=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
  ft_cmd_return=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
  ft_cmd_rx=[0,0,0]
  of_ack_received=False
  CB_COMPUTE_ENGINE_PING_LIMIT=19
  CB_COMPUTE_ENGINE_PING_DESC=0.05
  CB_SCALE_FLOAT=1000000
  FT_CMD_STATE_IDLE=0
  FT_CMD_STATE_STARTED=1
  FT_CMD_STATE_RETURNING=2
  FT_CMD_STATE_INTERRUPTED=3
  FT_CMD_ACK=0
  FT_CMD_PAYLOAD=6
  FT_CMD_INSERT_PART=15
  FT_CMD_TX_PARAM_LENGTH=20
  FT_DUMMY_VALUE=-1
  def of_float_to_int(value):
  if value>(2147483647/CB_SCALE_FLOAT):
  textmsg(of_float_to_int_overflow,value)
  value=2147483647/CB_SCALE_FLOAT
  elif value<(-2147483648/CB_SCALE_FLOAT):
  textmsg(of_float_to_int_underflow,value)
  value=-2147483648/CB_SCALE_FLOAT
  end 
  return value*CB_SCALE_FLOAT
  end 
  def of_int_to_float(value):
  return value/CB_SCALE_FLOAT
  end 
  thread ft_commandFlow_RX_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting Command RX thread..")
  end 
  while on_rtde_feed_opened:
  ft_cmd_rx=socket_read_binary_integer(2,"rtdeFeed",0)
  if ft_cmd_rx[0]!=0:
  parse_command()
  end 
  sync()
  ft_cmd_received=ft_cmd_received+1
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping Command RX thread")
  end 
  end 
  def of_send_command(command):
  sync()
  if FT_DEBUG_CMD or FT_DEBUG_TX:
  textmsg("Sending command: ",command)
  end 
  local succ=socket_send_int(command,"rtdeFeed")
  if not succ:
  if ON_DEBUG_LOG and FT_DEBUG_TX:
  textmsg(ft_ce_comm_cmd_send_error,command)
  popup(ft_ce_comm_cmd_send_again,title=on_rtde_feed_error_title,warning=True,blocking=False)
  end 
  sync()
  of_send_command(command)
  end 
  end 
  def of_send_int(intvalue):
  if FT_DEBUG_TX:
  textmsg("Sending integer: ",intvalue)
  end 
  local succ=socket_send_int(intvalue,"rtdeFeed")
  if not succ:
  if ON_DEBUG_LOG and FT_DEBUG_TX:
  textmsg(ft_ce_comm_int_send_error,intvalue)
  popup(ft_ce_comm_int_send_again,title=on_rtde_feed_error_title,warning=True,blocking=False)
  end 
  sync()
  of_send_int(intvalue)
  end 
  end 
  def of_send_float_as_int(floatvalue):
  local value=of_float_to_int(floatvalue)
  if FT_DEBUG_TX:
  textmsg("Sending [float, as int]: ",[floatvalue,value])
  end 
  local succ=socket_send_int(value,"rtdeFeed")
  if not succ:
  if ON_DEBUG_LOG and FT_DEBUG_TX:
  textmsg(ft_ce_comm_float_send_error,floatvalue)
  popup(ft_ce_comm_float_send_again,title=on_rtde_feed_error_title,warning=True,blocking=False)
  end 
  sync()
  of_send_float_as_int(floatvalue)
  end 
  end 
  def of_send_dummies(count):
  if FT_DEBUG_TX:
  textmsg("Sending dummies: ",count)
  end 
  local counter=0
  while counter<count:
  local succ=socket_send_int(FT_DUMMY_VALUE,"rtdeFeed")
  if not succ:
  if ON_DEBUG_LOG and FT_DEBUG_TX:
  textmsg(ft_ce_comm_dummy_send_error,[(counter+1),count])
  popup(ft_ce_comm_dummy_send_again,title=on_rtde_feed_error_title,warning=True,blocking=False)
  end 
  counter=counter-1
  sync()
  end 
  counter=counter+1
  end 
  end 
  def of_send_full(command,arg01=FT_DUMMY_VALUE,arg02=FT_DUMMY_VALUE,arg03=FT_DUMMY_VALUE,arg04=FT_DUMMY_VALUE,arg05=FT_DUMMY_VALUE,arg06=FT_DUMMY_VALUE,arg07=FT_DUMMY_VALUE,arg08=FT_DUMMY_VALUE,arg09=FT_DUMMY_VALUE,arg10=FT_DUMMY_VALUE,arg11=FT_DUMMY_VALUE,arg12=FT_DUMMY_VALUE,arg13=FT_DUMMY_VALUE,arg14=FT_DUMMY_VALUE,arg15=FT_DUMMY_VALUE,arg16=FT_DUMMY_VALUE,arg17=FT_DUMMY_VALUE,arg18=FT_DUMMY_VALUE,arg19=FT_DUMMY_VALUE,arg20=FT_DUMMY_VALUE):
  if FT_DEBUG_TX:
  textmsg("Sending full command: ",command)
  end 
  of_send_command(command)
  of_send_int(arg01)
  of_send_int(arg02)
  of_send_int(arg03)
  of_send_int(arg04)
  of_send_int(arg05)
  of_send_int(arg06)
  of_send_int(arg07)
  of_send_int(arg08)
  of_send_int(arg09)
  of_send_int(arg10)
  of_send_int(arg11)
  of_send_int(arg12)
  of_send_int(arg13)
  of_send_int(arg14)
  of_send_int(arg15)
  of_send_int(arg16)
  of_send_int(arg17)
  of_send_int(arg18)
  of_send_int(arg19)
  of_send_int(arg20)
  of_wait_for_ACK()
  if FT_DEBUG_TX:
  textmsg("Full command sent.")
  end 
  end 
  def of_wait_for_ACK(timeout=0):
  local timeout_sync_max=timeout*125
  local timeout_sync=0
  local timedOut=False
  if timeout>=0:
  useTimeout=True
  else:
  useTimeout=False
  end 
  syncCounter=0
  enter_critical
  local ackReceived=of_ack_received
  exit_critical
  while((not ackReceived)and(not timedOut)):
  sync()
  if useTimeout:
  timeout_sync=timeout_sync+1
  if timeout_sync>timeout_sync_max:
  timedOut=True
  end 
  end 
  enter_critical
  ackReceived=of_ack_received
  exit_critical
  end 
  enter_critical
  of_ack_received=False
  exit_critical
  end 
  def of_wait_for_return(ft_cmd_id,blocking):
  if not(ft_cmd_state[ft_cmd_id]==FT_CMD_STATE_IDLE):
  textmsg("Command state: [cmd_id, state]",[ft_cmd_id,ft_cmd_state[ft_cmd_id]])
  popup(ft_cmd_rx_wrong_state,title=ft_cmd_error_title,error=True,blocking=False)
  halt
  else:
  enter_critical
  ft_cmd_return[ft_cmd_id]=-1
  ft_cmd_state[ft_cmd_id]=FT_CMD_STATE_STARTED
  exit_critical
  end 
  if blocking:
  if FT_DEBUG_RX:
  textmsg("Waiting for return of CMD: ",ft_cmd_id)
  end 
  while ft_cmd_state[ft_cmd_id]==FT_CMD_STATE_STARTED:
  sync()
  end 
  end 
  enter_critical
  local retVal=ft_cmd_return[ft_cmd_id]
  ft_cmd_state[ft_cmd_id]=FT_CMD_STATE_IDLE
  ft_cmd_return[ft_cmd_id]=0
  exit_critical
  if FT_DEBUG_RX:
  textmsg("Return value received: [CMD, return]",[ft_cmd_id,retVal])
  end 
  return retVal
  end 
  def of_wait_for_return_stop(ft_cmd_id):
  enter_critical
  ft_cmd_state[ft_cmd_id]=FT_CMD_STATE_IDLE
  exit_critical
  end 
  def parse_command():
  if ft_cmd_rx[0]==0:
  if FT_DEBUG_RX:
  textmsg("Nothing received..")
  end 
  elif ft_cmd_rx[0]==1:
  if FT_DEBUG_RX:
  textmsg("Half command received: ",ft_cmd_rx[1])
  end 
  elif ft_cmd_rx[0]==2:
  if ft_cmd_rx[1]==FT_CMD_ACK:
  enter_critical
  of_ack_received=True
  exit_critical
  if FT_DEBUG_RX:
  textmsg("Acknowledge received")
  end 
  elif ft_cmd_rx[1]<get_list_length(ft_cmd_state):
  enter_critical
  local cmd_id=ft_cmd_rx[1]
  if(ft_cmd_state[cmd_id]==FT_CMD_STATE_IDLE):
  ft_cmd_return[cmd_id]=ft_cmd_rx[2]
  elif(ft_cmd_state[cmd_id]==FT_CMD_STATE_STARTED):
  ft_cmd_return[cmd_id]=ft_cmd_rx[2]
  ft_cmd_state[cmd_id]=FT_CMD_STATE_RETURNING
  else:
  popup(ft_cmd_rx_wrong_state,title=ft_cmd_error_title,error=True,blocking=False)
  halt
  end 
  exit_critical
  else:
  popup(ft_cmd_rx_invalid_id,title=ft_cmd_error_title,error=True,blocking=False)
  halt
  end 
  else:
  textmsg("Unknown command-length received: ",ft_cmd_rx)
  end 
  end 
  
  #======    End of OnRobot FT Interface    ======#
  #======    OnRobot RG2-FT Interface    ======#
  
  ft_Engine_state=0
  rg_lastZ_left=0
  rg_lastZ_right=0
  rg_Grip_edge=2
  def ft_dataRead_rg2ft():
  enter_critical
  floatRegDummy=read_input_float_register(6+on_floatRegShift)
  FT_Left[0]=floatRegDummy
  floatRegDummy=read_input_float_register(7+on_floatRegShift)
  FT_Left[1]=floatRegDummy
  floatRegDummy=read_input_float_register(8+on_floatRegShift)
  FT_Left[2]=floatRegDummy
  floatRegDummy=read_input_float_register(9+on_floatRegShift)
  FT_Left[3]=floatRegDummy
  floatRegDummy=read_input_float_register(10+on_floatRegShift)
  FT_Left[4]=floatRegDummy
  floatRegDummy=read_input_float_register(11+on_floatRegShift)
  FT_Left[5]=floatRegDummy
  floatRegDummy=read_input_float_register(12+on_floatRegShift)
  FT_Right[0]=floatRegDummy
  floatRegDummy=read_input_float_register(13+on_floatRegShift)
  FT_Right[1]=floatRegDummy
  floatRegDummy=read_input_float_register(14+on_floatRegShift)
  FT_Right[2]=floatRegDummy
  floatRegDummy=read_input_float_register(15+on_floatRegShift)
  FT_Right[3]=floatRegDummy
  floatRegDummy=read_input_float_register(16+on_floatRegShift)
  FT_Right[4]=floatRegDummy
  floatRegDummy=read_input_float_register(17+on_floatRegShift)
  FT_Right[5]=floatRegDummy
  floatRegDummy=read_input_float_register(18+on_floatRegShift)
  rg2ft_Prox_left=floatRegDummy
  floatRegDummy=read_input_float_register(19+on_floatRegShift)
  rg2ft_Prox_right=floatRegDummy
  floatRegDummy=read_input_float_register(20+on_floatRegShift)
  rg2ft_Width=floatRegDummy
  floatRegDummy=read_input_float_register(21+on_floatRegShift)
  rg2ft_Gyro[0]=floatRegDummy
  floatRegDummy=read_input_float_register(22+on_floatRegShift)
  rg2ft_Gyro[1]=floatRegDummy
  floatRegDummy=read_input_float_register(23+on_floatRegShift)
  rg2ft_Gyro[2]=floatRegDummy
  intRegDummy=read_input_integer_register(0+on_intRegShift)
  ft_Engine_state=intRegDummy
  intRegDummy=read_input_integer_register(1+on_intRegShift)
  ft_Sensor_ID=intRegDummy
  intRegDummy=read_input_integer_register(2+on_intRegShift)
  rg2ft_Status_left=intRegDummy
  intRegDummy=read_input_integer_register(3+on_intRegShift)
  rg2ft_Status_right=intRegDummy
  intRegDummy=read_input_integer_register(4+on_intRegShift)
  rg2ft_Status_backpack=intRegDummy
  boolRegDummy=read_input_boolean_register(0+on_boolRegShift)
  ft_Biased=boolRegDummy
  boolRegDummy=read_input_boolean_register(1+on_boolRegShift)
  rg2ft_Stopped=boolRegDummy
  boolRegDummy=read_input_boolean_register(2+on_boolRegShift)
  rg2ft_Gripped=boolRegDummy
  exit_critical
  end 
  thread rg2ft_dataRead_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting rg2ft_dataRead thread")
  end 
  while ft_dataRead_running:
  sync()
  ft_dataRead_rg2ft()
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping rg2ft_dataRead thread")
  end 
  end 
  thread rg2ft_start_watchdog_thread():
  sleep(1)
  on_set_rtde_watchdog(updateHz=5,ftWD=True)
  end 
  
  #======    End of OnRobot RG2-FT Interface    ======#
  #======    OnRobot TCP Messages    ======#
  
  on_tcp_log_msg_default="OnRobot: Robot TCP Offset set to:"
  on_tcp_log_msg_primary="OnRobot: Robot TCP Offset set to Primary:"
  on_tcp_log_msg_secondary="OnRobot: Robot TCP Offset set to Secondary:"
  
  #======    End of OnRobot TCP Messages    ======#
  #======    OnRobot TCP    ======#
  
  on_tcp_offset_actual=ON_ZEROFRAME
  on_tcp_offset_primary=ON_ZEROFRAME
  on_tcp_static_primary=ON_ZEROFRAME
  on_tcp_dynamic_primary=ON_ZEROFRAME
  on_tcp_vision_primary=ON_ZEROFRAME
  on_tcp_qc_primary=ON_ZEROFRAME
  on_tcp_base_primary=ON_ZEROFRAME
  on_tcp_gripper_static_primary=ON_ZEROFRAME
  on_tcp_tool_primary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_primary=ON_ZEROFRAME
  on_tcp_gripper_primary=ON_ZEROFRAME
  on_tcp_offset_secondary=ON_ZEROFRAME
  on_tcp_static_secondary=ON_ZEROFRAME
  on_tcp_dynamic_secondary=ON_ZEROFRAME
  on_tcp_vision_secondary=ON_ZEROFRAME
  on_tcp_qc_secondary=ON_ZEROFRAME
  on_tcp_base_secondary=ON_ZEROFRAME
  on_tcp_gripper_static_secondary=ON_ZEROFRAME
  on_tcp_tool_secondary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_secondary=ON_ZEROFRAME
  on_tcp_gripper_secondary=ON_ZEROFRAME
  def on_tcp_update_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary start..")
  end 
  on_tcp_gripper_dynamic_primary=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  enter_critical
  on_tcp_dynamic_primary=pose_trans(on_tcp_static_primary,on_tcp_gripper_dynamic_primary)
  on_tcp_offset_primary=pose_trans(on_tcp_dynamic_primary,on_tcp_tool_primary)
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary end.")
  end 
  end 
  def on_tcp_init_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary start..")
  end 
  enter_critical
  on_tcp_base_primary=pose_trans(on_tcp_vision_primary,on_tcp_qc_primary)
  on_tcp_static_primary=pose_trans(on_tcp_base_primary,on_tcp_gripper_static_primary)
  exit_critical
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary end.")
  end 
  end 
  def on_tcp_offset_set(TCP_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set started!")
  end 
  on_tcp_offset_send(TCP_offset)
  if(on_follow_tcp):
  set_tcp(TCP_offset)
  end 
  on_robot_TCP_offset=TCP_offset
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set to: ",on_robot_TCP_offset)
  end 
  end 
  def on_tcp_offset_forced_set_actual(isPrimary=True):
  if(not on_follow_tcp):
  
  local tcp_log_msg=on_tcp_log_msg_default
  
  textmsg(tcp_log_msg,on_tcp_offset_actual)
  set_tcp(on_tcp_offset_actual)
  end 
  end 
  def on_tcp_update(isPrimary=True):
  on_tcp_update_primary()
  
  on_tcp_set_actual_to(isPrimary)
  end 
  def on_tcp_set_actual_to(isPrimary=True):
  
  on_tcp_offset_actual=on_tcp_offset_primary
  if(on_follow_tcp):
  textmsg(on_tcp_log_msg_default,on_tcp_offset_actual)
  end 
  
  on_tcp_active_is_primary=isPrimary
  on_tcp_offset_set(on_tcp_offset_actual)
  end 
  def on_tcp_update_tool_primary(tool_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary start..")
  end 
  on_tcp_tool_primary=tool_offset
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary end.")
  end 
  end 
  def on_tcp_tool_rpy_get(xyz=[0.0,0.0,0.0],rpy=[0.0,0.0,0.0]):
  local rotvec=rpy2rotvec(rpy)
  local tool_offset=p[xyz[0],xyz[1],xyz[2],rotvec[0],rotvec[1],rotvec[2]]
  return tool_offset
  end 
  
  def on_tcp_update_tool(tool_offset,tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_tcp_update_tool_primary(tool_offset)
  local isPrimary=True
  
  end 
  on_tcp_set_actual_to(isPrimary)
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool end.")
  end 
  end 
  
  #======    End of OnRobot TCP    ======#
  #======    OnRobot Payload Messages    ======#
  
  on_mass_log_msg="OnRobot: Robot Payload Mass set to:"
  on_cog_log_msg="OnRobot: Robot Payload Center of Gravity set to:"
  
  #======    End of OnRobot Payload Messages    ======#
  #======    OnRobot Payload    ======#
  
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_cog_primary=ON_ZEROFRAME
  on_cog_L1L2_primary=ON_ZEROFRAME
  on_mass_primary=0.0
  on_mass_L1L2_primary=0.0
  on_cog_vision_primary=ON_ZEROFRAME
  on_cog_qc_primary=ON_ZEROFRAME
  on_cog_base_primary=ON_ZEROFRAME
  on_cog_gripper_primary=ON_ZEROFRAME
  on_cog_tool_primary=ON_ZEROFRAME
  on_mass_vision_primary=0.0
  on_mass_qc_primary=0.0
  on_mass_base_primary=0.0
  on_mass_gripper_primary=0.0
  on_mass_tool_primary=0.0
  on_cog_secondary=ON_ZEROFRAME
  on_mass_secondary=0.0
  on_cog_gripper_secondary=ON_ZEROFRAME
  on_mass_gripper_secondary=0.0
  on_cog_tool_secondary=ON_ZEROFRAME
  on_mass_tool_secondary=0.0
  ON_LB2KG001=0.45359237/100
  def on_payload_update_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary start..")
  end 
  enter_critical
  on_mass_primary=on_mass_L1L2_primary+on_mass_tool_primary
  local massL1L2L3Ratio=on_mass_tool_primary/on_mass_primary
  local toolAbsCOG=pose_trans(on_tcp_dynamic_primary,on_cog_tool_primary)
  toolAbsCOG=p[toolAbsCOG[0],toolAbsCOG[1],toolAbsCOG[2],0.0,0.0,0.0]
  on_cog_primary=interpolate_pose(on_cog_L1L2_primary,toolAbsCOG,massL1L2L3Ratio)
  on_cog_primary=p[on_cog_primary[0],on_cog_primary[1],on_cog_primary[2],0.0,0.0,0.0]
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary end.")
  end 
  end 
  def on_payload_init_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary start..")
  end 
  enter_critical
  on_mass_base_primary=on_mass_vision_primary+on_mass_qc_primary
  local massL0L1Ratio=on_mass_qc_primary/on_mass_base_primary
  on_mass_L1L2_primary=on_mass_base_primary+on_mass_gripper_primary
  local massL1L2Ratio=on_mass_gripper_primary/on_mass_L1L2_primary
  local qcAbsCOG=pose_trans(on_tcp_vision_primary,on_cog_qc_primary)
  qcAbsCOG=p[qcAbsCOG[0],qcAbsCOG[1],qcAbsCOG[2],0.0,0.0,0.0]
  on_cog_base_primary=interpolate_pose(on_cog_vision_primary,qcAbsCOG,massL0L1Ratio)
  on_cog_base_primary=p[on_cog_base_primary[0],on_cog_base_primary[1],on_cog_base_primary[2],0.0,0.0,0.0]
  local gripperAbsCOG=pose_trans(on_tcp_base_primary,on_cog_gripper_primary)
  gripperAbsCOG=p[gripperAbsCOG[0],gripperAbsCOG[1],gripperAbsCOG[2],0.0,0.0,0.0]
  on_cog_L1L2_primary=interpolate_pose(on_cog_base_primary,gripperAbsCOG,massL1L2Ratio)
  on_cog_L1L2_primary=p[on_cog_L1L2_primary[0],on_cog_L1L2_primary[1],on_cog_L1L2_primary[2],0.0,0.0,0.0]
  exit_critical
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary end.")
  end 
  end 
  def on_payload_update():
  on_payload_update_primary()
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  on_payload_set_actual()
  end 
  def on_payload_set_actual():
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  local CoG=[on_cog_actual[0],on_cog_actual[1],on_cog_actual[2]]
  on_payload_set(on_mass_actual,CoG)
  end 
  def on_payload_update_tool_primary(tool_mass=0,tool_cog=[0.0,0.0,0.0]):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary start..")
  end 
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary end.")
  end 
  end 
  def on_payload_set(mass,CoG):
  if ON_DEBUG_LOG:
  textmsg("Payload set started!")
  end 
  local center_of_gravity=[CoG[0],CoG[1],CoG[2]]
  on_payload_send(center_of_gravity,mass)
  if(on_isMetric):
  local roundedMass=floor(mass*100+0.5)/100
  else:
  local roundedMass=floor(mass/ON_LB2KG001+0.5)*ON_LB2KG001
  end 
  set_payload(roundedMass,center_of_gravity)
  on_mass_actual=roundedMass
  on_cog_actual=p[CoG[0],CoG[1],CoG[2],0.0,0.0,0.0]
  if ON_DEBUG_LOG:
  textmsg("Payload mass, CoG set to: ",str_cat(str_cat(mass,", "),CoG))
  end 
  end 
  
  def on_payload_update_secondary():
  end 
  def on_payload_init_secondary():
  end 
  
  def on_payload_update_tool(tool_mass,tool_cog=[0.0,0.0,0.0],tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  else:
  on_cog_tool_secondary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_secondary=tool_mass
  end 
  on_payload_update()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool end.")
  end 
  end 
  def on_payload_get_cog2tcp_tool(tool_index=0):
  if(tool_index!=ON_DI_SECONDARY):
  local cog_tool=[on_tcp_tool_primary[0],on_tcp_tool_primary[1],on_tcp_tool_primary[2]]
  else:
  local cog_tool=[on_tcp_tool_secondary[0],on_tcp_tool_secondary[1],on_tcp_tool_secondary[2]]
  end 
  return cog_tool
  end 
  
  #======    End of OnRobot Payload    ======#
  #======    OnRobot QC TCP    ======#
  
  onrobotmini=0
  
  
  
  #======    End of OnRobot QC TCP    ======#
  #======    OnRobot FT TCP    ======#
  
  def on_tcp_offset_send(TCP_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Offset sending started!")
  end 
  local offset=[TCP_offset[0]*1000.0,TCP_offset[1]*1000.0,TCP_offset[2]*1000.0,TCP_offset[3],TCP_offset[4],TCP_offset[5]]
  on_xmlrpc.cb_tcp(offset)
  on_robot_TCP_offset=TCP_offset
  if ON_DEBUG_LOG:
  textmsg("TCP Offset sent.")
  end 
  end 
  def on_payload_send(CoG,mass):
  if ON_DEBUG_LOG:
  textmsg("Payload sending started!")
  end 
  local center_of_gravity=[CoG[0]*1000.0,CoG[1]*1000.0,CoG[2]*1000.0]
  local mount=[on_robot_mount[0]*1000.0,on_robot_mount[1]*1000.0]
  on_xmlrpc.cb_payload(mount,mass+0.0,center_of_gravity)
  on_robot_payload_cog=CoG
  on_robot_payload_mass=mass
  if ON_DEBUG_LOG:
  textmsg("Payload sent.")
  end 
  end 
  
  #======    End of OnRobot FT TCP    ======#
  #======    OnRobot RG2-FT TCP Messages    ======#
  
  rg2ft_tcp_set_done="OnRobot: TCP set to the RG2-FT fingertip center."
  
  #======    End of OnRobot RG2-FT TCP Messages    ======#
  #======    OnRobot RG2-FT TCP    ======#
  
  rg2ft_armDepthMax=0.03575 
  rg2ft_mount_bracket_offset=35.0/1000.0
  rg2ft_mount_body_offset=p[0.0,0.0,(0.160+rg2ft_armDepthMax),0.0,0.0,0.0]
  rg2ft_mount_cog_offset=p[0.0,0.0,0.065,0.0,0.0,0.0]
  rg2ft_sensorCenterOffsetZ=-7.6 
  rg2ft_pivotCenterOffsetZ=26.8 
  rg2ft_pivotCenterOffsetY=-2.3 
  rg2ft_armDepthZSum=rg2ft_pivotCenterOffsetZ+rg2ft_sensorCenterOffsetZ 
  rg2ft_armLength=55.0 
  def rg2ft_cb_mount_offset(gripper_angle):
  if ON_DEBUG_LOG:
  textmsg("RG2-FT Mount command starting..")
  end 
  local gripperRotVec=rpy2rotvec([0.0,gripper_angle,d2r(-90)])
  local gripperMountOffset=p[0.0,0.0,rg2ft_mount_bracket_offset,gripperRotVec[0],gripperRotVec[1],gripperRotVec[2]]
  if ON_DEBUG_LOG:
  textmsg("RG2-FT Mount command ended.")
  end 
  return gripperMountOffset
  end 
  def rg2ft_mount_tcp(gripper_angle):
  if ON_DEBUG_LOG:
  textmsg("RG2-FT Mount command starting..")
  end 
  local gripperRotVec=rpy2rotvec([gripper_angle,0.0,0.0])
  local gripperMountOffset=p[0.0,0.0,rg2ft_mount_bracket_offset,gripperRotVec[0],gripperRotVec[1],gripperRotVec[2]]
  local gripperOffsetStatic=pose_trans(gripperMountOffset,rg2ft_mount_body_offset)
  if ON_DEBUG_LOG:
  textmsg("RG2-FT Mount command ended.")
  end 
  return gripperOffsetStatic
  end 
  def rg2ft_mount_cog(gripper_angle):
  if ON_DEBUG_LOG:
  textmsg("RG2-FT Mount CoG command starting..")
  end 
  local gripperRotVec=rpy2rotvec([gripper_angle,0.0,0.0])
  local gripperMountOffset=p[0.0,0.0,rg2ft_mount_bracket_offset,gripperRotVec[0],gripperRotVec[1],gripperRotVec[2]]
  local gripperCOGOffset=pose_trans(gripperMountOffset,rg2ft_mount_cog_offset)
  if ON_DEBUG_LOG:
  textmsg("RG2-FT Mount CoG command ended.")
  end 
  return gripperCOGOffset
  end 
  def rg2ft_fcp_depth_calc(gripperWidth):
  local d2=gripperWidth/2.0-rg2ft_pivotCenterOffsetY
  local alpha=asin(d2/rg2ft_armLength)
  local gripperDepth=rg2ft_armLength*cos(alpha)-rg2ft_armDepthZSum
  local gripperDepthNeg=gripperDepth
  return gripperDepthNeg
  end
  def rg2ft_fcp_depth_calc_frame(gripperWidth):
  local gripperDepth=rg2ft_fcp_depth_calc(gripperWidth)/1000.0
  local z_offset=gripperDepth-rg2ft_armDepthMax
  return p[0.0,0.0,z_offset,0.0,0.0,0.0]
  end
  def rg2ft_tcp_dynamic_get():
  local offset=rg2ft_fcp_depth_calc_frame(rg2ft_Width)
  return offset
  end 
  def rg2ft_part_tcp_get(length,angle):
  local part_offset=p[0,0,length,0,0,0]
  local finger_rotation=rpy2rotvec([0,angle,0])
  local part_rotation=p[0,0,0,finger_rotation[0],finger_rotation[1],finger_rotation[2]]
  local part_tcp=pose_trans(part_rotation,part_offset)
  return part_tcp
  end
  def rg2ft_payload_set(mass,tool_index,use_guard=False):
  if ON_DEBUG_LOG:
  textmsg("RG Payload mass command starting..")
  end 
  tool_index=ON_DI_SINGLE
  local cogTool=[on_cog_tool_primary[0],on_cog_tool_primary[1],on_cog_tool_primary[2]]
  if(rg2ft_Gripped):
  local mass2set=mass
  else:
  local mass2set=0.0
  end 
  on_payload_update_tool(mass2set,cogTool,tool_index)
  if ON_DEBUG_LOG:
  textmsg("RG Payload mass command ended.")
  end 
  end 
  
  #======    End of OnRobot RG2-FT TCP    ======#
  #======    OnRobot  Speedl    ======#
  
  on_speedl_thread_handler=0
  on_speedl_is_enabled=False
  on_speedl_is_running=False
  on_speedl_acc=0.0
  ft_speedl_hg_caranteen_reached=False
  ft_speedl_hg_caranteen_safemode=False
  on_speedl_for_ftcontrol=False
  on_speedl_for_move=False
  on_speedl_for_handguide=False
  on_speedl_for_insertpart=False
  on_speedl_for_depthcompensation=False
  on_speedl_for_center=False
  on_speedl_for_gecko=False
  on_speedl_acc=10000.0 
  on_speedl_acc_to_zero=3.0 
  ON_SPEEDL_FTCONTROL=1
  ON_SPEEDL_HANDGUIDE=2
  ON_SPEEDL_MOVE=3
  ON_SPEEDL_INSERTPART=4
  ON_SPEEDL_DEPTHCOMP=5
  ON_SPEEDL_CENTER=6
  ON_SPEEDL_GECKO=7
  def on_speedl_add_extra(speedBase,speedExtra):
  speedSum=ON_ZERO6D
  speedBaseP=p[speedBase[0],speedBase[1],speedBase[2],speedBase[3],speedBase[4],speedBase[5]]
  speedExtraP=p[speedExtra[0],speedExtra[1],speedExtra[2],speedExtra[3],speedExtra[4],speedExtra[5]]
  speedSumP=pose_add(speedExtraP,speedBaseP)
  speedSum=[speedSumP[0],speedSumP[1],speedSumP[2],speedSumP[3],speedSumP[4],speedSumP[5]]
  return speedSum
  end 
  
  def ft_speedl_hg_caranteen_check(speedBase):
  if ft_speedl_hg_caranteen_reached:
  if ft_speedl_hg_caranteen_safemode:
  local XYplane=get_actual_tool_flange_pose()
  if(XYplane[0]<0 and speedBase[0]>0)or(XYplane[0]>0 and speedBase[0]<0):
  speedBase[0]=0
  end 
  if(XYplane[1]<0 and speedBase[1]>0)or(XYplane[1]>0 and speedBase[1]<0):
  speedBase[1]=0
  end 
  else:
  speedBase=ON_ZERO6D
  end 
  end 
  return speedBase
  end 
  
  thread on_speedl_thread():
  if ON_DEBUG_LOG:
  textmsg("Speedl thread started..")
  end 
  enter_critical
  on_speedl_is_running=True
  on_speedl_is_enabled=True
  exit_critical
  on_speedL=ON_ZERO6D
  
  while on_speedl_is_running:
  on_speedBase=on_speedVect_get()
  on_speedL=on_speedBase
  
  
  
  if on_speedl_for_handguide:
  on_speedL=ft_speedl_hg_caranteen_check(on_speedL)
  end 
  
  if on_speedl_is_enabled:
  speedl(on_speedL,a=on_speedl_acc,t=0.001)
  else:
  speedl(ON_ZERO6D,a=on_speedl_acc_to_zero,t=0.001)
  end 
  end 
  
  on_speedL=ON_ZERO6D
  if ON_DEBUG_LOG:
  textmsg("Speedl thread ended.")
  end 
  end 
  def on_speedl_integer_get():
  local speedl_integer=binary_list_to_integer([on_speedl_for_ftcontrol,on_speedl_for_handguide,on_speedl_for_move,on_speedl_for_insertpart,on_speedl_for_depthcompensation,on_speedl_for_center,on_speedl_for_gecko])
  return speedl_integer
  end 
  def on_speedl_start_for(speedl_id):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=True
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=True
  elif(speedl_id==ON_SPEEDL_MOVE):
  on_speedl_for_move=True
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=True
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=True
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=True
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=True
  else:
  textmsg("Unknown Start speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if not(speedl_integer==0):
  if not on_speedl_is_running:
  on_speedl_thread_handler=run on_speedl_thread()
  end 
  end 
  return on_speedl_is_running
  end 
  def on_speedl_stop_for(speedl_id,brake=10):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=False
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=False
  elif(speedl_id==ON_SPEEDL_MOVE):
  on_speedl_for_move=False
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=False
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=False
  on_speedDC_set(ON_ZERO6D)
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=False
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=False
  on_speedGecko_set(ON_ZERO6D)
  else:
  textmsg("Unknown Stop speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if(speedl_integer==0):
  if(on_speedl_is_running):
  kill on_speedl_thread_handler
  enter_critical
  on_speedl_is_running=False
  exit_critical
  
  end 
  if ON_DEBUG_LOG:
  textmsg("Speedl thread stopped")
  end 
  stopl(brake)
  end 
  return on_speedl_is_running
  end 
  def on_speedl_pause():
  on_speedl_is_enabled=False
  return on_speedl_integer_get()
  end 
  def on_speedl_resume():
  on_speedl_is_enabled=True
  return on_speedl_integer_get()
  end 
  def on_wait_ms(time_ms):
  local sync_time=ceil(norm(time_ms/2.0))
  while(sync_time>0):
  sync_time=sync_time-1
  sync()
  end
  end
  
  #======    End of OnRobot  Speedl    ======#
  #======    OnRobot Engine Messages    ======#
  
  rg2ft_sensor_id_waiting="Waiting for valid OnRobot RG2-FT ID from Compute Box IP:"
  rg2ft_sensor_id_timeout="Waiting for valid OnRobot RG2-FT ID timed out.<br>Program halted."
  rg2ft_sensor_error_title="OnRobot - Sensor error"
  rg2ft_sensor_error_type="No or unknown sensor connected.<br>Refer to the Compute Box Description on the OnRobot USB drive."
  rg2ft_sensor_error_mixed="The sensor type is not matching with the URCap mode.<br>Please make sure at the Installation tab that proper Compute Box and Sensor/Gripper settings are set, then restart the robot if needed."
  rg2ft_sensor_warning_title="OnRobot - Sensor warning:"
  rg2ft_sensor_else_error="Unknown error code(s).<br>Connect to the Compute Box Web Access, and analize the STATUS word. Refer to the Compute Box Description on the OnRobot USB drive."
  rg2ft_sensor_status_msg_backpack="Gripper Backpack status:"
  rg2ft_sensor_bit0_error_backpack="No sensor connected.<br>Turn off the Compute Box, connect the RG2-FT to the Compute Box with an undamaged cable, turn on the Compute Box. If the error persists, contact your distributor."
  rg2ft_sensor_bit1_error_backpack="Gripper Backpack is not responding.<br>Turn off the Compute Box, connect the RG2-FT to the Compute Box with an undamaged cable, turn on the Compute Box. If the error persists, contact your distributor."
  rg2ft_sensor_bit2_error_backpack="Gripper Backpack failure.<br>Gather information about the situation in which this error occurred, and contact your distributor."
  rg2ft_sensor_bit3_error_backpack="Gripper firmware mismatch.<br>Firmware update is available for the RG2-FT. Required updates need to be installed. Refer to the Compute Box Description on the OnRobot USB drive."
  rg2ft_sensor_bit4_error_backpack="Communication error between the Gripper Backpack and the Compute Box.<br>Turn off the Compute Box, connect the RG2-FT to the Compute Box with an undamaged cable, turn on the Compute Box. If the error persists, contact your distributor."
  rg2ft_sensor_status_msg_left="Left Sensor status:"
  rg2ft_sensor_bit0_error_left="No sensor connected.<br>Turn off the Compute Box, connect the RG2-FT to the Compute Box with an undamaged cable, turn on the Compute Box. If the error persists, contact your distributor."
  rg2ft_sensor_bit1_error_left="Left Sensor is not responding.<br>Turn off the Compute Box, connect the RG2-FT to the Compute Box with an undamaged cable, turn on the Compute Box. If the error persists, contact your distributor."
  rg2ft_sensor_bit2_error_left="Left Sensor failure.<br>Gather information about the situation in which this error occurred, and contact your distributor."
  rg2ft_sensor_bit3_error_left="Left Sensor power error.<br>Gather information about the situation in which this error occurred, and contact your distributor, or OnRobot."
  rg2ft_sensor_bit4_error_left="Communication error between the Left Sensor and the Compute Box.<br>Turn off the Compute Box, connect the RG2-FT to the Compute Box with an undamaged cable, turn on the Compute Box. If the error persists, contact your distributor."
  rg2ft_sensor_bit5_error_left="Left Sensor force overload error.<br>Eliminate the circumstances that cause the sensor to be overloaded, that is, offload the sensor."
  rg2ft_sensor_bit6_error_left="Left Sensor torque overload error.<br>Eliminate the circumstances that cause the sensor to be overloaded, that is, offload the sensor."
  rg2ft_sensor_bit7_warning_left="Left Sensor overload warning reached. Lower the force/torque to avoid damage."
  rg2ft_sensor_bit8_error_left="Left Sensor overload limit activated.<br>Lower the force/torque to avoid damage.<br>Program halted."
  rg2ft_sensor_status_msg_right="Right Sensor status:"
  rg2ft_sensor_bit0_error_right="No sensor connected.<br>Turn off the Compute Box, connect the RG2-FT to the Compute Box with an undamaged cable, turn on the Compute Box. If the error persists, contact your distributor."
  rg2ft_sensor_bit1_error_right="Right Sensor is not responding.<br>Turn off the Compute Box, connect the RG2-FT to the Compute Box with an undamaged cable, turn on the Compute Box. If the error persists, contact your distributor."
  rg2ft_sensor_bit2_error_right="Right Sensor failure.<br>Gather information about the situation in which this error occurred, and contact your distributor."
  rg2ft_sensor_bit3_error_right="Right Sensor power error.<br>Gather information about the situation in which this error occurred, and contact your distributor, or OnRobot."
  rg2ft_sensor_bit4_error_right="Communication error between the Right Sensor and the Compute Box.<br>Turn off the Compute Box, connect the RG2-FT to the Compute Box with an undamaged cable, turn on the Compute Box. If the error persists, contact your distributor."
  rg2ft_sensor_bit5_error_right="Right Sensor force overload error.<br>Eliminate the circumstances that cause the sensor to be overloaded, that is, offload the sensor."
  rg2ft_sensor_bit6_error_right="Right Sensor torque overload error.<br>Eliminate the circumstances that cause the sensor to be overloaded, that is, offload the sensor."
  rg2ft_sensor_bit7_warning_right="Right Sensor overload warning reached. Lower the force/torque to avoid damage."
  rg2ft_sensor_bit8_error_right="Right Sensor overload limit activated.<br>Lower the force/torque to avoid damage.<br>Program halted."
  
  #======    End of OnRobot Engine Messages    ======#
  #======    OnRobot RG2-FT Engine    ======#
  
  ft_Engine_state=0
  rg_lastZ_left=0
  rg_lastZ_right=0
  rg_Grip_edge=2
  def ft_dataProcess_errors_rg2ft(sensor_stop=False):
  if(rg2ft_Status_backpack!=0):
  local sensor_status_bits=integer_to_binary_list(rg2ft_Status_backpack)
  sensor_stop=on_error(sensor_status_bits[0],rg2ft_sensor_bit0_error_backpack,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[1],rg2ft_sensor_bit1_error_backpack,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[2],rg2ft_sensor_bit2_error_backpack,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[3],rg2ft_sensor_bit3_error_backpack,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[4],rg2ft_sensor_bit4_error_backpack,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error((rg2ft_Status_backpack>31),rg2ft_sensor_else_error,rg2ft_sensor_error_title,sensor_stop)
  textmsg(rg2ft_sensor_status_msg_backpack,rg2ft_Status_backpack)
  end 
  if(rg2ft_Status_left!=0):
  local sensor_status_bits=integer_to_binary_list(rg2ft_Status_left)
  sensor_stop=on_error(sensor_status_bits[0],rg2ft_sensor_bit0_error_left,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[1],rg2ft_sensor_bit1_error_left,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[2],rg2ft_sensor_bit2_error_left,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[3],rg2ft_sensor_bit3_error_left,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[4],rg2ft_sensor_bit4_error_left,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[5],rg2ft_sensor_bit5_error_left,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[6],rg2ft_sensor_bit6_error_left,rg2ft_sensor_error_title,sensor_stop)
  on_warning(sensor_status_bits[7],rg2ft_sensor_bit7_warning_left,rg2ft_sensor_warning_title)
  sensor_stop=on_error(sensor_status_bits[8],rg2ft_sensor_bit8_error_left,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error((rg2ft_Status_left>511),rg2ft_sensor_else_error,rg2ft_sensor_error_title,sensor_stop)
  textmsg(rg2ft_sensor_status_msg_left,rg2ft_Status_left)
  end 
  if(rg2ft_Status_right!=0):
  local sensor_status_bits=integer_to_binary_list(rg2ft_Status_right)
  sensor_stop=on_error(sensor_status_bits[0],rg2ft_sensor_bit0_error_right,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[1],rg2ft_sensor_bit1_error_right,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[2],rg2ft_sensor_bit2_error_right,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[3],rg2ft_sensor_bit3_error_right,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[4],rg2ft_sensor_bit4_error_right,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[5],rg2ft_sensor_bit5_error_right,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error(sensor_status_bits[6],rg2ft_sensor_bit6_error_right,rg2ft_sensor_error_title,sensor_stop)
  on_warning(sensor_status_bits[7],rg2ft_sensor_bit7_warning_right,rg2ft_sensor_warning_title)
  sensor_stop=on_error(sensor_status_bits[8],rg2ft_sensor_bit8_error_right,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=on_error((rg2ft_Status_right>511),rg2ft_sensor_else_error,rg2ft_sensor_error_title,sensor_stop)
  textmsg(rg2ft_sensor_status_msg_right,rg2ft_Status_right)
  end 
  return sensor_stop
  end 
  thread ft_dataProcess_rg2ft_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting dataProcess thread")
  end 
  while ft_dataProcess_running:
  sync()
  local sensor_stop=False
  if(ft_Sensor_ID==FT_SENSOR_ID_HEX_V1 or ft_Sensor_ID==FT_SENSOR_ID_HEX_V2 or ft_Sensor_ID==FT_SENSOR_ID_HEX_V3):
  on_hex=True
  elif(ft_Sensor_ID==FT_SENSOR_ID_RG2FT_V0 or ft_Sensor_ID==FT_SENSOR_ID_RG2FT_V1 or ft_Sensor_ID==FT_SENSOR_ID_RG2FT_V2):
  on_hex=False
  elif(ft_Sensor_ID==FT_SENSOR_ID_UNDEFINED):
  if(ft_has_valid_ID):
  textmsg("Sensor type ID: ",ft_Sensor_ID)
  popup(rg2ft_sensor_bit1_error_backpack,title=rg2ft_sensor_error_title,error=True,blocking=False)
  halt
  end 
  if ON_DEBUG_LOG:
  textmsg("Establishing connection with the sensor.. Undefined sensor: ",ft_Sensor_ID)
  end 
  else:
  textmsg("Sensor type ID: ",ft_Sensor_ID)
  popup(rg2ft_sensor_error_type,title=rg2ft_sensor_error_title,error=True,blocking=False)
  halt
  end 
  sensor_stop=on_error(((False)xor(on_hex)),rg2ft_sensor_error_mixed,rg2ft_sensor_error_title,sensor_stop)
  sensor_stop=ft_dataProcess_errors_rg2ft(sensor_stop)
  if sensor_stop:
  halt
  end 
  enter_critical
  F3D_Left=norm([FT_Left[0],FT_Left[1],FT_Left[2]])
  F3D_Right=norm([FT_Right[0],FT_Right[1],FT_Right[2]])
  T3D_Left=norm([FT_Left[3],FT_Left[4],FT_Left[5]])
  T3D_Right=norm([FT_Right[3],FT_Right[4],FT_Right[5]])
  FT_Mixed=[(FT_Left[2]+FT_Right[2]),(FT_Left[0]+FT_Right[0]),(FT_Left[1]+FT_Right[1]),(FT_Left[5]+FT_Right[5]),(FT_Left[3]+FT_Right[3]),(FT_Left[4]+FT_Right[4])]
  local tcp_transform=on_tcp_tool_primary
  tcp_transform[0]=0
  tcp_transform[1]=0
  tcp_transform[2]=0
  tcp_transform=pose_inv(tcp_transform)
  local tcpF=pose_trans(tcp_transform,p[FT_Mixed[0],FT_Mixed[1],FT_Mixed[2],0,0,0])
  local tcpT=pose_trans(tcp_transform,p[FT_Mixed[3],FT_Mixed[4],FT_Mixed[5],0,0,0])
  FT_Tool=[tcpF[0],tcpF[1],tcpF[2],tcpT[0],tcpT[1],tcpT[2]]
  F3D=norm([tcpF[0],tcpF[1],tcpF[2]])
  T3D=norm([tcpT[0],tcpT[1],tcpT[2]])
  Fx=tcpF[0]
  Fy=tcpF[1]
  Fz=tcpF[2]
  Tx=tcpT[0]
  Ty=tcpT[1]
  Tz=tcpT[2]
  local act_transform=pose_trans(get_actual_tool_flange_pose(),on_tcp_static_primary)
  act_transform[0]=0
  act_transform[1]=0
  act_transform[2]=0
  local bF=pose_trans(act_transform,p[FT_Mixed[0],FT_Mixed[1],FT_Mixed[2],0,0,0])
  local bT=pose_trans(act_transform,p[FT_Mixed[3],FT_Mixed[4],FT_Mixed[5],0,0,0])
  FT_Base=[bF[0],bF[1],bF[2],bT[0],bT[1],bT[2]]
  if((FT_Left[2]-rg_lastZ_left>rg_Grip_edge)and(FT_Right[2]-rg_lastZ_right>rg_Grip_edge)):
  rg2ft_FGrip_detected=True
  rg2ft_FGripped=True
  end 
  if((FT_Left[2]-rg_lastZ_left<-rg_Grip_edge)and(FT_Right[2]-rg_lastZ_right<-rg_Grip_edge)):
  rg2ft_FGrip_lost=True
  rg2ft_FGripped=False
  end 
  rg2ft_Slip_alert=(norm([FT_Left[0],FT_Left[1]])>FT_Left[2]*0.5)or(norm([FT_Right[0],FT_Right[1]])>FT_Right[2]*0.5)
  rg2ft_Part_width=rg2ft_Width-(rg2ft_Prox_left+rg2ft_Prox_right)
  if rg2ft_Part_width<0:
  if rg2ft_Part_width<-0.5*rg2ft_Width:
  rg2ft_Part_width=-1
  else:
  rg2ft_Part_width=0
  end 
  end 
  if rg2ft_Part_width>=0:
  rg2ft_Part_weight=norm([FT_Mixed[0],FT_Mixed[1],FT_Mixed[2]])
  else:
  rg2ft_Part_weight=-1
  end 
  Proximity_Left=rg2ft_Prox_left
  Proximity_Right=rg2ft_Prox_right
  Width=rg2ft_Width-(2*rg2ft_fingertip)
  Part_Width=rg2ft_Part_width
  rg_lastZ_left=FT_Left[2]
  rg_lastZ_right=FT_Right[2]
  exit_critical
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping dataProcess thread")
  end 
  end 
  def rg2ft_index_get():
  return 0
  end 
  
  #======    End of OnRobot RG2-FT Engine    ======#
  rg2ft_mounting_angle = 0.0
  rg2ft_proxi_offsets = [0.0, 0.0]
  rg2ft_fingertip = 0
  on_install_tcp = False
  on_follow_tcp = False
  textmsg(on_devices_primary_log, ": Quick Changer + RG2-FT + [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]")
  on_tcp_active_is_primary = True
  on_tcp_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_vision_primary = 0.0
  on_tcp_qc_primary = p[0.0, 0.0, 0.0136, 0.0, 0.0, 0.0]
  on_cog_qc_primary = p[0.0, 0.0, 0.004, 0.0, 0.0, 0.0]
  on_mass_qc_primary = 0.06
  on_tcp_gripper_static_primary = rg2ft_mount_tcp(rg2ft_mounting_angle)
  on_cog_gripper_primary = rg2ft_mount_cog(rg2ft_mounting_angle)
  on_mass_gripper_primary = 0.98
  on_tcp_tool_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_tool_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_tool_primary = 0.0
  #======    OnRobot FT Bias    ======#
  
  def ft_bias(zero=True):
  if ON_DEBUG_LOG:
  textmsg("FT Bias sending...")
  end 
  on_wait_ms(100)
  on_xmlrpc.ft_bias(zero)
  on_wait_ms(100)
  if ON_DEBUG_LOG:
  textmsg("FT Bias sent.")
  end 
  end 
  
  #======    End of OnRobot FT Bias    ======#
  #======    OnRobot FT Sensor Config    ======#
  
  ft_sensor_flange_offset=ON_ZEROFRAME
  ft_sensor_TCP_offset=ON_ZEROFRAME
  def ft_sensor_config_send(sensorFlangeOffset=ON_ZEROFRAME):
  if ON_DEBUG_LOG:
  textmsg("Sensor Config sending started!")
  end 
  sensorOffset=[sensorFlangeOffset[0]*1000.0,sensorFlangeOffset[1]*1000.0,sensorFlangeOffset[2]*1000.0,sensorFlangeOffset[3],sensorFlangeOffset[4],sensorFlangeOffset[5]]
  on_xmlrpc.ft_sensor_config(sensorOffset)
  ft_sensor_flange_offset=sensorFlangeOffset
  if ON_DEBUG_LOG:
  textmsg("Sensor Config sent.")
  end 
  end 
  
  #======    End of OnRobot FT Sensor Config    ======#
  #======    OnRobot RG2-FT Mount    ======#
  
  def rg2ft_mount_send(gripper_offset):
  sync()
  if ON_DEBUG_LOG:
  textmsg("Gripper Mount Send command starting..")
  end 
  local mount=[gripper_offset[0]*1000.0,gripper_offset[1]*1000.0,gripper_offset[2]*1000.0,gripper_offset[3],gripper_offset[4],gripper_offset[5]]
  on_xmlrpc.rg2ft_mount(mount)
  if ON_DEBUG_LOG:
  textmsg("Gripper Mount Send command ended.")
  end 
  end 
  
  #======    End of OnRobot RG2-FT Mount    ======#
  #======    OnRobot RG2-FT Width Messages    ======#
  
  rg2ft_width_set_error_title="OnRobot - Gripper Set Width error"
  rg2ft_width_set_state_error_start="Wrong Gripper Set Width status when initializing.<br>Another thread is using a Gripper Set Width command. Program halted."
  rg2ft_width_set_state_error_return="Wrong Gripper Set Width status when returning.<br>Another thread is using a Gripper Set Width command. Program halted."
  rg2ft_width_set_return_title="OnRobot - Gripper Set Width"
  rg2ft_width_set_return_nonblocking="The Gripper Set Width non-blocking command sent."
  rg2ft_width_set_return_PE="The Gripper Set Width command has a parameter error.<br>Program halted."
  rg2ft_width_set_return_unknown="The Gripper Set Width command finished with unknown return value."
  
  #======    End of OnRobot RG2-FT Width Messages    ======#
  #======    OnRobot RG2-FT Width    ======#
  
  rg2ft_width_set_state=0
  rg2ft_width_set_return=0
  RG2FT_MAX_WIDTH=100
  RG2FT_MAX_FORCE=40
  RG2FT_WIDTH_SET_STATE_IDLE=0
  RG2FT_WIDTH_SET_STATE_INIT=1
  RG2FT_WIDTH_SET_STATE_STARTED=2
  RG2FT_WIDTH_SET_STATE_RETURNING=3
  rg2ft__width_set_param_error_width="Please define parameter 'width' as a positive real number in millimeters!"
  rg2ft__width_set_param_warning_width="The parameter 'width' is higher than the maximum value. Maximum value sent: "
  rg2ft__width_set_param_error_force="Please define parameter 'force' as a positive  real number in Newtons!"
  rg2ft__width_set_param_warning_force="The parameter 'force' higher than the maximum value. Maximum value sent: "
  def rg2ft_grip(width,force,tool_index=0,blocking=True,depth_comp=False,popupmsg=True):
  sync()
  if ON_DEBUG_LOG:
  textmsg("Gripper Set Width starting..")
  end 
  if not(rg2ft_width_set_state==RG2FT_WIDTH_SET_STATE_IDLE):
  textmsg("rg2ft_width_set_state: ",rg2ft_width_set_state)
  popup(rg2ft_width_set_state_error_start,title=ft_cmd_error_title,error=True,blocking=False)
  halt
  else:
  enter_critical
  rg2ft_width_set_state=RG2FT_WIDTH_SET_STATE_INIT
  exit_critical
  end 
  enter_critical
  rg2ft_width_set_return=0
  exit_critical
  width=floor(width+0.5+(2*rg2ft_fingertip))
  force=floor(force+0.5)
  if not(width>=0):
  rg2ft_width_set_return=-99
  popup(rg2ft__width_set_param_error_width,title=rg2ft_width_set_error_title,error=True,blocking=False)
  elif not(width<=RG2FT_MAX_WIDTH):
  width=RG2FT_MAX_WIDTH
  textmsg(rg2ft__width_set_param_warning_width,width)
  elif not(force>0):
  rg2ft_width_set_return=-99
  popup(rg2ft__width_set_param_error_force,title=rg2ft_width_set_error_title,error=True,blocking=False)
  elif not(force<=RG2FT_MAX_FORCE):
  force=RG2FT_MAX_FORCE
  textmsg(rg2ft__width_set_param_warning_force,force)
  end 
  if(rg2ft_width_set_return!=0):
  halt
  end 
  if depth_comp:
  on_speedl_start_for(ON_SPEEDL_DEPTHCOMP)
  end 
  if ON_DEBUG_LOG:
  textmsg("Gripper Set Width command sent, waiting for the return.")
  end 
  enter_critical
  rg2ft_width_set_state=RG2FT_WIDTH_SET_STATE_STARTED
  exit_critical
  rg2ft_width_set_return=on_xmlrpc.rg2ft_grip(width,force,blocking,depth_comp)
  if depth_comp:
  on_speedl_stop_for(ON_SPEEDL_DEPTHCOMP)
  end 
  if(on_follow_tcp):
  on_tcp_update()
  end 
  if ON_DEBUG_LOG:
  textmsg("Gripper Set Width returned.")
  end 
  if rg2ft_width_set_return!=0:
  textmsg("rg2ft_width_set_return: ",rg2ft_width_set_return)
  popup(rg2ft_width_set_return_unknown,title=rg2ft_width_set_return_title,warning=True,blocking=True)
  end 
  enter_critical
  rg2ft_width_set_state=RG2FT_WIDTH_SET_STATE_IDLE
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("End of Gripper Set Width.")
  end 
  return rg2ft_width_set_return 
  end 
  def rg2ft_grip_stop():
  sync()
  if ON_DEBUG_LOG:
  textmsg("RG2-FT Grip Stop command starting..")
  end 
  on_speedl_stop_for(ON_SPEEDL_DEPTHCOMP)
  on_xmlrpc.rg2ft_grip_stop()
  if ON_DEBUG_LOG:
  textmsg("End of RG2-FT Grip Stop.")
  end 
  end 
  
  #======    End of OnRobot RG2-FT Width    ======#
  
  #======    End of OnRobot RG2-FT Stop Messages    ======#
  #======    OnRobot RG2-FT Stop    ======#
  
  def rg2ft_stop():
  sync()
  if ON_DEBUG_LOG:
  textmsg("Gripper Stop command starting..")
  end 
  on_speedl_stop_for(ON_SPEEDL_DEPTHCOMP)
  on_speedl_stop_for(ON_SPEEDL_CENTER)
  on_xmlrpc.rg2ft_grip_stop()
  on_xmlrpc.rg2ft_center_stop()
  if ON_DEBUG_LOG:
  textmsg("End of Gripper Stop.")
  end 
  end 
  
  #======    End of OnRobot RG2-FT Stop    ======#
  #======    OnRobot RG2-FT Center Messages    ======#
  
  rg2ft_centering_title="OnRobot - RG2-FT Center"
  rg2ft_centering_start_error="RG2-FT Center state error. Program halted."
  
  #======    End of OnRobot RG2-FT Center Messages    ======#
  #======    OnRobot RG2-FT Center    ======#
  
  rg2ft_centering_state=0
  RG2FT_CENTERING_STATE_IDLE=0
  RG2FT_CENTERING_STATE_RUNNING=1
  def rg2ft_center(gain,pow_gain=0.05):
  sync()
  if ON_DEBUG_LOG:
  textmsg("Gripper Centering Enable starting..")
  end 
  if not(rg2ft_centering_state==RG2FT_CENTERING_STATE_IDLE):
  textmsg("rg2ft_centering_state: ",rg2ft_centering_state)
  popup(rg2ft_centering_start_error,title=rg2ft_centering_title,error=True,blocking=False)
  halt
  else:
  rg2ft_centering_state=RG2FT_CENTERING_STATE_RUNNING
  end 
  on_speedl_start_for(ON_SPEEDL_CENTER)
  on_xmlrpc.rg2ft_center_start(gain+0.0,pow_gain+0.0)
  if ON_DEBUG_LOG:
  textmsg("End of Gripper Centering Enable.")
  end 
  end 
  def rg2ft_center_stop():
  if ON_DEBUG_LOG:
  textmsg("Start of Gripper Centering Disable.")
  end 
  on_speedl_stop_for(ON_SPEEDL_CENTER)
  on_xmlrpc.rg2ft_center_stop()
  enter_critical
  rg2ft_centering_state=RG2FT_CENTERING_STATE_IDLE
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("Gripper Centering Disabled.")
  end 
  end 
  
  #======    End of OnRobot RG2-FT Center    ======#
  
  #======    End of OnRobot RG2-FT Proximity Offsets Messages    ======#
  #======    OnRobot RG2-FT Proximity Offsets    ======#
  
  rg2ft_ProxL_offset=0
  rg2ft_ProxR_offset=0
  rg2ft__proxi_offsets_error_title="OnRobot - RG2-FT Proxi Offset"
  rg2ft__proxi_offsets_error_ProxL="Please define parameter 'ProxL' as an integer between -200 and 200."
  rg2ft__proxi_offsets_error_ProxR="Please define parameter 'ProxR' as an integer between -200 and 200."
  def rg2ft_proxi_offsets_set(ProxL=0.0,ProxR=0.0):
  sync()
  if ON_DEBUG_LOG:
  textmsg("RG2-FT Proximity Offsets command starting..")
  end 
  local parameter_error=False
  if not(ProxL>=-200 and ProxL<=200):
  parameter_error=True
  popup(rg2ft__proxi_offsets_error_ProxL,title=rg2ft__proxi_offsets_error_title,error=True,blocking=False)
  elif not(ProxR>=-200 and ProxR<=200):
  parameter_error=True
  popup(rg2ft__proxi_offsets_error_ProxR,title=rg2ft__proxi_offsets_error_title,error=True,blocking=False)
  end 
  if(parameter_error):
  halt
  end 
  rg2ft_ProxL_offset=floor(ProxL+0.5)
  rg2ft_ProxR_offset=floor(ProxR+0.5)
  on_xmlrpc.rg2ft_proxi_offsets(rg2ft_ProxL_offset,rg2ft_ProxR_offset)
  if ON_DEBUG_LOG:
  textmsg("RG2-FT Proximity Offsets command stopping..")
  end 
  end 
  rg2ft_proxi_offsets_set(rg2ft_proxi_offsets[0],rg2ft_proxi_offsets[1])
  
  #======    End of OnRobot RG2-FT Proximity Offsets    ======#
  #======    OnRobot Run    ======#
  
  textmsg(on_xmlrpc_start_ip,on_device_ip)
  on_portopen_javaSocket()
  sync()
  on_rtde_feed_open()
  sync()
  local gripperWDs=binary_list_to_integer(on_gripper)
  if gripperWDs==0:
  gripperWDs=-1
  else:
  gripperWDs=floor(gripperWDs/2)
  end 
  on_set_rtde_watchdog(updateHz=0.2,ftWD=on_ft,gripperWD=gripperWDs)
  sync()
  on_dataRead_running=True
  sync()
  on_dataRead_thrd=run on_dataRead_thread()
  sync()
  on_tcp_init_primary()
  on_payload_init_primary()
  
  on_tcp_set_actual_to(on_tcp_active_is_primary)
  if(on_follow_tcp):
  on_payload_set_actual()
  end 
  
  #======    End of OnRobot Run    ======#
  #======    OnRobot QC Start    ======#
  
  if(on_toolConnector):
  tc_setup_tool()
  end 
  sync()
  
  #======    End of OnRobot QC Start    ======#
  #======    OnRobot CB Run    ======#
  
  cb_sensor_cycle=4
  cb_robot_max_trans_spd=1500.0
  cb_robot_max_rot_spd=1.75
  cb_robot_max_trans_acc=3000.0
  cb_robot_max_rot_acc=0.2
  on_xmlrpc.cb_robot_configuration(cb_robot_max_rot_spd,cb_robot_max_trans_spd,cb_sensor_cycle,cb_robot_cycle,cb_robot_max_trans_acc,cb_robot_max_rot_acc)
  
  #======    End of OnRobot CB Run    ======#
  #======    OnRobot FT Run    ======#
  
  ft_sensor_filter=4
  ft_cmd_thrd=run ft_commandFlow_RX_thread()
  sync()
  
  #======    End of OnRobot FT Run    ======#
  #======    OnRobot RG2-FT Run    ======#
  
  on_xmlrpc.ft_sensor_filter(ft_sensor_filter)
  ft_dataRead_running=True
  sync()
  ft_dataRead_thrd=run rg2ft_dataRead_thread()
  sync()
  textmsg(rg2ft_sensor_id_waiting,on_device_ip)
  local rg2ft_timeout=0
  while(ft_Sensor_ID==FT_SENSOR_ID_UNDEFINED):
  sync()
  rg2ft_timeout=rg2ft_timeout+1
  if(rg2ft_timeout>ON_INIT_TIMEOUT):
  popup(rg2ft_sensor_id_timeout,rg2ft_sensor_error_title,error=True,blocking=False)
  halt
  end 
  end 
  ft_has_valid_ID=True
  ft_dataProcess_running=True
  sync()
  ft_dataProcess_thrd=run ft_dataProcess_rg2ft_thread()
  sync()
  rg2ft_watchdog_start_thrd=run rg2ft_start_watchdog_thread()
  sync()
  sync()
  local gripper_mount=rg2ft_cb_mount_offset(rg2ft_mounting_angle)
  rg2ft_mount_send(gripper_mount)
  ft_sensor_config_send(on_tcp_base_primary)
  on_tcp_offset_send(get_tcp_offset())
  ft_bias(True)
  
  #======    End of OnRobot RG2-FT Run    ======#
  #======    OnRobot FT Limit    ======#
  
  def ft_limit_start(ft_select=ON_FALSE8D,ft_limits=ON_ZERO8D,ft_abs=ON_FALSE6D,v_min=0,frameID=0,frameRPY=ON_ZERO3D,popupmsg=True):
  local frame_rotvec=rpy2rotvec(frameRPY)
  local frame=[0.0,0.0,0.0,frame_rotvec[0],frame_rotvec[1],frame_rotvec[2]]
  on_xmlrpc.ft_limit(ft_limits,ft_abs,ft_select,v_min*1000.0,frameID,frame)
  end 
  def ft_limit_stop(forFTControl=False):
  on_xmlrpc.ft_limit_stop()
  end 
  
  #======    End of OnRobot FT Limit    ======#
  #======    OnRobot FT FTControl Messages    ======#
  
  ft_ftcontrol_title="OnRobot - F/T Control"
  ft_ftcontrol_start_error="Do not include a F/T Control command under another F/T Control command."
  
  #======    End of OnRobot FT FTControl Messages    ======#
  #======    OnRobot FT FTControl    ======#
  
  ft_ftcontrol_state=0
  ft_ftcontrol_return=0
  FT_FTCONTROL_STATE_IDLE=0
  FT_FTCONTROL_STATE_RUNNING=1
  def ft_ftcontrol_start(ft_select=ON_FALSE6D,ft_values=ON_ZERO6D,frameID=0,frameRPY=ON_ZERO3D,gainP=[1.0,1.0,1.0,1.0,1.0,1.0],gainI=ON_ZERO6D,gainD=ON_ZERO6D):
  if not(ft_ftcontrol_state==FT_FTCONTROL_STATE_IDLE):
  textmsg("ft_ftcontrol_state: ",ft_ftcontrol_state)
  popup(ft_ftcontrol_start_error,title=ft_ftcontrol_title,error=True,blocking=False)
  halt
  else:
  ft_ftcontrol_state=FT_FTCONTROL_STATE_RUNNING
  end 
  on_tcp_offset_send(get_tcp_offset())
  local frame_rotvec=rpy2rotvec(frameRPY)
  local frame=[0.0,0.0,0.0,frame_rotvec[0],frame_rotvec[1],frame_rotvec[2]]
  if ON_DEBUG_LOG:
  textmsg("Start force mode")
  end 
  on_speedl_start_for(ON_SPEEDL_FTCONTROL)
  on_xmlrpc.ft_ftcontrol(ft_values,ft_select,frameID,frame,gainP,gainI,gainD)
  if frameID==0 or frameID==1 or frameID==2 or frameID==3:
  ft_parent_ft_move_frameID=frameID
  ft_parent_ft_move_frame=p[0,0,0,frame_rotvec[0],frame_rotvec[1],frame_rotvec[2]]
  else:
  ft_parent_ft_move_frameID=0
  ft_parent_ft_move_frame=ON_ZEROFRAME
  end 
  if ON_DEBUG_LOG:
  textmsg("FT Control started")
  end 
  end 
  def ft_ftcontrol_stop():
  on_speedl_stop_for(ON_SPEEDL_FTCONTROL)
  on_xmlrpc.ft_ftcontrol_stop()
  ft_ftcontrol_state=FT_FTCONTROL_STATE_IDLE
  ft_parent_ft_move_frameID=0
  ft_parent_ft_move_frame=ON_ZEROFRAME
  end 
  
  #======    End of OnRobot FT FTControl    ======#
  #======    OnRobot FT Hand Guide Messages    ======#
  
  ft_hand_guide_title="OnRobot - Hand Guide"
  ft_hand_guide_error_high_ft="Too high forces. Hand Guide stopped."
  ft_hand_guide_error_singularity="The tool flange is too close to a singularity. Hand Guide stopped."
  ft_hand_guide_safemode_enter="The tool flange is too close to the Base Z-axis singularity. Hand Guide is in Safe mode."
  ft_hand_guide_state_error="Do not include a Hand Guide command under another Hand Guide or F/T Control command."
  ft_hand_guide_return_error="The command returned with error."
  ft_hand_guide_safemode_exit="Hand Guide Safe mode ended."
  
  #======    End of OnRobot FT Hand Guide Messages    ======#
  #======    OnRobot FT Hand Guide    ======#
  
  ft_hg_enable_HandGuide=True
  ft_hand_guide_state=0
  ft_hg_enable_axes=ON_FALSE6D
  ft_hg_axisZ_extra_dist=0
  ft_hg_axisZ_min_dist=0
  ft_hg_axisZ_dist=0
  ft_hg_TMB_dist=0
  ft_hg_joints_min_dev=0
  ft_hg_stop_F=0
  ft_hg_stop_T=0
  ft_hg_joints_min_dev=d2r(0.5)
  ft_hg_axisZ_extra_dist=0.06
  if on_robot_type==10:
  if ON_DEBUG_LOG:
  textmsg("Robot type UR10 set")
  end 
  ft_hg_axisZ_min_dist=0.163941
  ft_hg_TMB_dist=0.0922
  elif on_robot_type==5:
  if ON_DEBUG_LOG:
  textmsg("Robot type UR5 set")
  end 
  ft_hg_axisZ_min_dist=0.10915
  ft_hg_TMB_dist=0.0823
  elif on_robot_type==3:
  if ON_DEBUG_LOG:
  textmsg("Robot type UR3 set")
  end 
  ft_hg_axisZ_min_dist=0.11235
  ft_hg_TMB_dist=0.0819
  elif on_robot_type==0:
  if ON_DEBUG_LOG:
  textmsg("Robot type not set: do not use caranteen")
  end 
  ft_hg_axisZ_min_dist=0
  ft_hg_TMB_dist=0.0
  else:
  if ON_DEBUG_LOG:
  textmsg("Unknown robot type, using UR10 parameters; Type: ",on_robot_type)
  end 
  ft_hg_axisZ_min_dist=0.163941
  ft_hg_TMB_dist=0.0922
  end 
  ft_hg_axisZ_dist=ft_hg_axisZ_min_dist+ft_hg_axisZ_extra_dist
  if on_hex:
  ft_hg_sensor_filter=6
  else:
  ft_hg_sensor_filter=5
  end 
  FT_HAND_GUIDE_STATE_IDLE=0
  FT_HAND_GUIDE_STATE_RUNNING=1
  def ft_hand_guide_start(axes_en=ON_FALSE6D,frameID=1,frame=ON_ZERO6D,thresholdF=15.0,thresholdT=0.6,saturationV=0.6,saturationW=0.2,stopF=100,stopT=5,gainP=[0.15,0.15,0.15,0.15,0.15,0.15],gainI=[0.0,0.0,0.0,0.0,0.0,0.0],gainD=[0.01,0.01,0.01,0.01,0.01,0.01]):
  if ON_DEBUG_LOG:
  textmsg("Starting hand guide")
  end 
  local retVal=0
  if not(ft_hand_guide_state==FT_HAND_GUIDE_STATE_IDLE or ft_hand_guide_state==FT_HAND_GUIDE_STATE_RUNNING):
  textmsg("ft_hand_guide_state: ",ft_hand_guide_state)
  popup(ft_hand_guide_state_error,title=ft_hand_guide_title,error=True,blocking=False)
  halt
  else:
  ft_hand_guide_state=FT_HAND_GUIDE_STATE_RUNNING
  end 
  local tcp_for_hand_guide=get_tcp_offset()
  if on_hex:
  tcp_for_hand_guide[0]=on_cog_actual[0]
  tcp_for_hand_guide[1]=on_cog_actual[1]
  tcp_for_hand_guide[2]=on_cog_actual[2]
  end
  on_tcp_offset_send(tcp_for_hand_guide)
  retVal=on_xmlrpc.ft_sensor_filter(ft_hg_sensor_filter)
  if retVal!=0:
  popup(ft_hand_guide_return_error,title=ft_hand_guide_title,error=True,blocking=False)
  end 
  ft_hg_stop_F=stopF
  ft_hg_stop_T=stopT
  frameID=1
  frame=ON_ZERO6D
  on_speedl_start_for(ON_SPEEDL_HANDGUIDE)
  retVal=on_xmlrpc.ft_handguide(axes_en,thresholdF,thresholdT,saturationV*1000.0,saturationW,frameID,frame,gainP,gainI,gainD)
  if retVal!=0:
  popup(ft_hand_guide_return_error,title=ft_hand_guide_title,error=True,blocking=False)
  end 
  if ON_DEBUG_LOG:
  textmsg("HandGuide started")
  end 
  end 
  def ft_hand_guide_stop():
  on_speedl_stop_for(ON_SPEEDL_HANDGUIDE)
  on_xmlrpc.ft_ftcontrol_stop()
  ft_hand_guide_state=FT_HAND_GUIDE_STATE_IDLE
  ft_parent_ft_move_frameID=0
  ft_parent_ft_move_frame=ON_ZEROFRAME
  on_xmlrpc.ft_sensor_filter(ft_sensor_filter)
  end 
  def ft_hg_stop_limit_reached():
  local is_reached=False
  
  if(F3D_Left>ft_hg_stop_F):
  is_reached=True
  elif(F3D_Right>ft_hg_stop_F):
  is_reached=True
  elif(T3D_Left>ft_hg_stop_T):
  is_reached=True
  elif(T3D_Right>ft_hg_stop_T):
  is_reached=True
  end
  
  return is_reached
  end
  def ft_hg_stop_area_reached():
  local is_reached=False
  local Zzero=p[0,0,0,0,0,0]
  local XYplane=p[0,0,0,0,0,0]
  local act_flange=get_actual_tool_flange_pose()
  local act_joints=get_actual_joint_positions()
  XYplane[0]=act_flange[0]
  XYplane[1]=act_flange[1]
  local qWrist2=act_joints[4]%ON_MATH_PI
  local dist2Z=point_dist(XYplane,Zzero)
  local dist2Z_min=ft_hg_axisZ_dist+(ft_hg_TMB_dist*cos(act_joints[4]))
  if(dist2Z<dist2Z_min):
  ft_speedl_hg_caranteen_reached=True
  elif(dist2Z>dist2Z_min+0.01):
  ft_speedl_hg_caranteen_reached=False
  if ft_speedl_hg_caranteen_safemode:
  ft_speedl_hg_caranteen_safemode=False
  textmsg(ft_hand_guide_safemode_exit)
  end 
  end 
  if(norm(qWrist2)<ft_hg_joints_min_dev):
  is_reached=True
  end
  return is_reached
  end
  def ft_hand_guide_run():
  while ft_hg_enable_HandGuide:
  if(ft_hg_stop_limit_reached()):
  popup(ft_hand_guide_error_high_ft,title=ft_hand_guide_title,error=True,blocking=False)
  ft_hg_enable_HandGuide=False
  elif(ft_hg_stop_area_reached()):
  popup(ft_hand_guide_error_singularity,title=ft_hand_guide_title,warning=True,blocking=False)
  ft_hg_enable_HandGuide=False
  elif(ft_speedl_hg_caranteen_reached and(not ft_speedl_hg_caranteen_safemode)):
  popup(ft_hand_guide_safemode_enter,title=ft_hand_guide_title,warning=True,blocking=True)
  ft_speedl_hg_caranteen_safemode=True
  else:
  sync()
  end 
  end 
  ft_hand_guide_stop()
  end 
  
  #======    End of OnRobot FT Hand Guide    ======#
  #======    OnRobot FT Move Messages    ======#
  
  ft_move_error_title="OnRobot - F/T Move error"
  ft_search_error_title="OnRobot - F/T Search error"
  ft_move_init_error="Wrong F/T Move or F/T Search status when initializing.<br>Another thread is using an F/T Move or F/T Search command.<br>Program halted."
  ft_move_start_error="Wrong F/T Move or F/T Search status when starting.<br>Another thread is using an F/T Move or F/T Search command.<br>Program halted."
  ft_move_return_error="Wrong F/T Move or F/T Search status when returning.<br>Another thread is using an F/T Move or F/T Search command.<br>Program halted."
  ft_move_parameter_error_count="Parameter error.<br>Incorrect use of F/T Waypoint or F/T Path in the F/T Move or F/T Search command.<br>Program halted."
  ft_move_return_stop="<br>Program halted."
  ft_move_move_return_title="OnRobot - F/T Move"
  ft_move_move_return_0="The move ended without detecting a force or torque greater than the set limit."
  ft_move_move_return_1="The move ended, because a force or torque greater than the set limit was detected."
  ft_move_move_return_3="The move was interrupted by a command."
  ft_move_move_return_11="The move cannot start, because there is no recorded path on the Compute Box with the selected ID.<br>Program halted."
  ft_move_move_return_12="The move cannot start, because there are no recorded points in this Path.<br>Program halted."
  ft_move_move_return_13="The move cannot start, because the Path file found at this Path ID is empty.<br>Program halted."
  ft_move_move_return_14="The move cannot start, because the Path file is corrupted.<br>Program halted."
  ft_move_move_return_unknown="F/T Move finished with unknown return value.<br>Program halted."
  ft_move_search_return_title="OnRobot - F/T Search"
  ft_move_search_return_0="The search ended successfully, because a force or torque greater than the set limit was detected."
  ft_move_search_return_1="The search ended without detecting a force or torque greater than the set limit."
  ft_move_search_return_3="The search was interrupted by a command."
  ft_move_search_return_11="The search cannot start, because there is no recorded path on the Compute Box with the selected ID.<br>Program halted."
  ft_move_search_return_12="The search cannot start, because there are no recorded points in this Path.<br>Program halted."
  ft_move_search_return_13="The search cannot start, because the Path file found at this Path ID is empty.<br>Program halted."
  ft_move_search_return_14="The search cannot start, because the Path file is corrupted.<br>Program halted."
  ft_move_search_return_unknown="F/T Search finished with unknown return value.<br>Program halted."
  
  #======    End of OnRobot FT Move Messages    ======#
  #======    OnRobot FT Move    ======#
  
  ft_move_state=0
  ft_move_return=0
  ft_move_frameID=0 
  ft_move_frame=ON_ZEROFRAME
  ft_move_last_pose=ON_ZEROPOSE
  ft_move_min_dist=0
  ft_move_wp_count=0
  ft_move_path_count=0
  ft_move_path_move_home=False
  ft_move_path_return=0
  ft_move_min_dist=0.001
  FT_MOVE_STATE_IDLE=0
  FT_MOVE_STATE_INIT=1
  FT_MOVE_STATE_GLOBALS_SET=2
  FT_MOVE_STATE_PARAM_SEND=3
  FT_MOVE_STATE_PARAM_SENT=4
  FT_MOVE_STATE_INITED=5
  FT_MOVE_STATE_STARTING=6
  FT_MOVE_STATE_WP_SENT=7
  FT_MOVE_STATE_STARTED=8
  FT_MOVE_STATE_RETURNING=9
  FT_MOVE_STATE_FINISHED=10
  FT_MOVE_STATE_STOPPING=11
  FT_MOVE_STATE_PATH_STOPPED=12
  ft__move_parameter_error_coordsys="Parameter error.<br>Unknown coordinate system. Program stopped."
  ft__move_parameter_error_speed="Parameter error.<br>Invalid value for the speed parameter. Program stopped."
  ft__move_parameter_error_acc="Parameter error.<br>Invalid value for the acc parameter. Program stopped."
  def ft_move_init(frameID=0,frameRPY=ON_ZERO3D,speed=0.05,acc=1.2,scale=False,move2First=True,move2Last=True):
  sync()
  if not(ft_move_state==FT_MOVE_STATE_IDLE):
  textmsg("ft_move_state: ",ft_move_state)
  popup(ft_move_init_error,title=ft_move_error_title,error=True,blocking=False)
  halt
  end 
  enter_critical
  ft_move_state=FT_MOVE_STATE_INIT
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("FT Move initializing..")
  end 
  if not(speed>0):
  popup(ft__move_parameter_error_speed,title=ft_move_error_title,error=True,blocking=False)
  halt
  elif not(acc>0):
  popup(ft__move_parameter_error_acc,title=ft_move_error_title,error=True,blocking=False)
  halt
  else:
  sync()
  end
  enter_critical
  ft_move_state=FT_MOVE_STATE_GLOBALS_SET
  exit_critical
  on_tcp_offset_send(get_tcp_offset())
  ft_move_frameID=frameID
  if frameID==0 or frameID==1:
  ft_move_frame=ON_ZEROFRAME
  elif frameID==2 or frameID==3:
  frame_rotvec=rpy2rotvec(frameRPY)
  ft_move_frame=p[0.0,0.0,0.0,frame_rotvec[0],frame_rotvec[1],frame_rotvec[2]]
  else:
  popup(ft__move_parameter_error_coordsys,title=ft_move_error_title,error=True,blocking=False)
  halt
  end 
  ft_move_path_move_home=False
  ft_move_path_count=0
  ft_move_wp_count=0
  ft_move_last_pose=get_actual_tcp_pose()
  local frameRV=rpy2rotvec(frameRPY)
  local frame=[0.0,0.0,0.0,frameRV[0],frameRV[1],frameRV[2]]
  enter_critical
  ft_move_state=FT_MOVE_STATE_PARAM_SEND
  exit_critical
  global move_ret=on_xmlrpc.cb_move_init(speed*1000.0,acc*1000.0,ft_move_frameID,frame)
  if(move_ret!=0):
  textmsg("Move INIT returned with error code: ",move_ret)
  end 
  enter_critical
  ft_move_state=FT_MOVE_STATE_PARAM_SENT
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("FT Move initialized")
  end 
  enter_critical
  ft_move_state=FT_MOVE_STATE_INITED
  exit_critical
  sync()
  end 
  def ft_move_start_atomic():
  if ON_DEBUG_LOG:
  textmsg("Start Atomic (Move) sending..")
  end 
  on_speedl_start_for(ON_SPEEDL_MOVE)
  local move_ret=on_xmlrpc.cb_move()
  if ON_DEBUG_LOG:
  textmsg("Start Atomic (Move) sent")
  end 
  return move_ret
  end 
  def ft_move_start_move(popupmsg=True):
  sync()
  if(ft_move_state==FT_MOVE_STATE_PATH_STOPPED):
  local move_return=ft_move_path_return
  elif not(ft_move_state==FT_MOVE_STATE_INITED):
  textmsg("ft_move_state: ",ft_move_state)
  popup(ft_move_start_error,title=ft_move_error_title,error=True,blocking=False)
  halt
  else:
  enter_critical
  ft_move_state=FT_MOVE_STATE_STARTING
  exit_critical
  if not(ft_move_wp_count>0 or ft_move_path_count==1):
  textmsg("[Waypoint#, Path#]: ",[ft_move_wp_count,ft_move_path_count])
  popup(ft_move_parameter_error_count,title=ft_move_error_title,error=True,blocking=False)
  halt
  else:
  sync()
  end
  if ON_DEBUG_LOG:
  textmsg("FT Move started")
  end 
  enter_critical
  ft_move_state=FT_MOVE_STATE_STARTED
  exit_critical
  local move_return=ft_move_start_atomic()
  on_speedl_stop_for(ON_SPEEDL_MOVE)
  end 
  enter_critical
  ft_move_state=FT_MOVE_STATE_FINISHED
  exit_critical
  if move_return==9:
  ft_move_return=0
  elif move_return==12:
  ft_move_return=1
  if popupmsg:
  popup(str_cat(ft_move_move_return_1,ft_move_return_stop),title=ft_move_move_return_title,warning=True,blocking=False)
  halt
  end 
  elif move_return==4:
  ft_move_return=3
  if popupmsg:
  popup(str_cat(ft_move_move_return_3,ft_move_return_stop),title=ft_move_move_return_title,warning=True,blocking=False)
  halt
  end 
  elif move_return==3:
  ft_move_return=3
  popup(str_cat(ft_move_move_return_3,ft_move_return_stop),title=ft_move_move_return_title,warning=True,blocking=False)
  halt
  elif move_return==8:
  ft_move_return=8
  popup(ft_move_move_return_unknown,title=ft_move_move_return_title,warning=True,blocking=False)
  halt
  elif move_return==-11:
  ft_move_return=11
  popup(ft_move_move_return_11,title=ft_move_move_return_title,error=True,blocking=False)
  halt
  elif move_return==-12:
  ft_move_return=12
  popup(ft_move_move_return_12,title=ft_move_move_return_title,error=True,blocking=False)
  halt
  elif move_return==-13:
  ft_move_return=13
  popup(ft_move_move_return_13,title=ft_move_move_return_title,error=True,blocking=False)
  halt
  elif move_return==-14:
  ft_move_return=14
  popup(ft_move_move_return_14,title=ft_move_move_return_title,error=True,blocking=False)
  halt
  else:
  ft_move_return=move_return
  popup(ft_move_move_return_unknown,title=ft_move_move_return_title,error=True,blocking=False)
  halt
  end 
  if ON_DEBUG_LOG:
  textmsg("FT Move finished with return value: ",ft_move_return)
  end 
  if(ft_move_path_move_home):
  if(ft_move_return==0):
  enter_critical
  ft_move_state=FT_MOVE_STATE_INITED
  ft_move_path_return=move_return
  exit_critical
  else:
  enter_critical
  ft_move_state=FT_MOVE_STATE_PATH_STOPPED
  ft_move_path_return=move_return
  exit_critical
  end 
  else:
  enter_critical
  ft_move_state=FT_MOVE_STATE_IDLE
  exit_critical
  end 
  sync()
  return ft_move_return
  end 
  def ft_move_start_search(popupmsg=True):
  sync()
  if(ft_move_state==FT_MOVE_STATE_PATH_STOPPED):
  local move_return=ft_move_path_return
  elif not(ft_move_state==FT_MOVE_STATE_INITED):
  textmsg("ft_move_state: ",ft_move_state)
  popup(ft_move_start_error,title=ft_search_error_title,error=True,blocking=False)
  halt
  else:
  enter_critical
  ft_move_state=FT_MOVE_STATE_STARTING
  exit_critical
  if not(ft_move_wp_count>0 or ft_move_path_count==1):
  textmsg("[Waypoint#, Path#]: ",[ft_move_wp_count,ft_move_path_count])
  popup(ft_move_parameter_error_count,title=ft_search_error_title,error=True,blocking=False)
  halt
  else:
  sync()
  end
  if ON_DEBUG_LOG:
  textmsg("FT Move started")
  end 
  enter_critical
  ft_move_state=FT_MOVE_STATE_STARTED
  exit_critical
  local move_return=ft_move_start_atomic()
  on_speedl_stop_for(ON_SPEEDL_MOVE)
  end 
  enter_critical
  ft_move_state=FT_MOVE_STATE_FINISHED
  exit_critical
  if move_return==12:
  ft_search_return=0
  elif move_return==9:
  ft_search_return=1
  if popupmsg:
  popup(str_cat(ft_move_search_return_1,ft_move_return_stop),title=ft_move_search_return_title,warning=True,blocking=False)
  halt
  end 
  elif move_return==4:
  ft_search_return=3
  if popupmsg:
  popup(str_cat(ft_move_search_return_3,ft_move_return_stop),title=ft_move_search_return_title,warning=True,blocking=False)
  halt
  end 
  elif move_return==3:
  ft_search_return=3
  popup(str_cat(ft_move_search_return_3,ft_move_return_stop),title=ft_move_search_return_title,warning=True,blocking=False)
  halt
  elif move_return==8:
  ft_search_return=8
  popup(ft_move_search_return_unknown,title=ft_move_search_return_title,error=True,blocking=False)
  halt
  elif move_return==-11:
  ft_search_return=11
  popup(ft_move_search_return_11,title=ft_move_search_return_title,error=True,blocking=False)
  halt
  elif move_return==-12:
  ft_search_return=12
  popup(ft_move_search_return_12,title=ft_move_search_return_title,error=True,blocking=False)
  halt
  elif move_return==-13:
  ft_search_return=13
  popup(ft_move_search_return_13,title=ft_move_search_return_title,error=True,blocking=False)
  halt
  elif move_return==-14:
  ft_search_return=14
  popup(ft_move_search_return_14,title=ft_move_search_return_title,error=True,blocking=False)
  halt
  else:
  ft_search_return=move_return
  popup(ft_move_search_return_unknown,title=ft_move_search_return_title,error=True,blocking=False)
  halt
  end 
  if ON_DEBUG_LOG:
  textmsg("FT Search finished with return value: ",ft_search_return)
  end 
  if(ft_move_path_move_home):
  if(ft_search_return==0):
  enter_critical
  ft_move_state=FT_MOVE_STATE_INITED
  exit_critical
  else:
  enter_critical
  ft_move_state=FT_MOVE_STATE_PATH_STOPPED
  exit_critical
  end 
  else:
  enter_critical
  ft_move_state=FT_MOVE_STATE_IDLE
  exit_critical
  end 
  sync()
  return ft_search_return
  end 
  def ft_move_limit_return(limit_return):
  if limit_return==0:
  ft_move_return=0
  elif limit_return==1:
  ft_move_return=1
  else:
  ft_move_return=2
  if ON_DEBUG_LOG:
  textmsg("FT Move returned with limit_return: ",limit_return)
  end 
  end 
  end 
  def ft_move_stop():
  if ft_move_state==FT_MOVE_STATE_IDLE:
  textmsg("No move command has been stopped")
  else:
  enter_critical
  ft_move_state=FT_MOVE_STATE_STOPPING
  exit_critical
  on_speedl_stop_for(ON_SPEEDL_MOVE)
  on_xmlrpc.cb_move_stop()
  ft_move_return=3 
  end 
  enter_critical
  ft_move_state=FT_MOVE_STATE_IDLE
  exit_critical
  end 
  
  #======    End of OnRobot FT Move    ======#
  #======    OnRobot FT Waypoint Messages    ======#
  
  ft_waypoint_error_title="OnRobot - F/T Waypoint error"
  ft_waypoint_move_state_error="Wrong program structure when initializing F/T Waypoint.<br>Program halted.<br>Make sure that the F/T Waypoint is under F/T Move or F/T Search."
  ft_waypoint_path_count_error="Incorrect use of F/T Waypoint.<br>Do not use F/T Waypoint and F/T Path in the same F/T Move or F/T Search.<br>Program halted."
  ft_waypoint_parameter_error_target="Parameter error.<br>Please define a valid Fixed, Variable or Relative F/T Waypoint.<br>Program halted."
  ft_waypoint_parameter_error_close="Parameter error.<br>The given pose is too close to the last one. Program halted."
  ft_waypoint_parameter_error_distance="Distance to the last pose:"
  
  #======    End of OnRobot FT Waypoint Messages    ======#
  #======    OnRobot FT Move    ======#
  
  def ft_waypoint_send(wp):
  if not(wp==ON_ZEROPOSE):
  relativeWPInt=0
  local wp_array=[wp[0]*1000.0,wp[1]*1000.0,wp[2]*1000.0,wp[3],wp[4],wp[5]]
  on_xmlrpc.cb_move_waypoint(wp_array)
  if ON_DEBUG_LOG:
  textmsg("FT Waypoint sent: ",wp)
  end 
  ft_move_wp_count=ft_move_wp_count+1
  else:
  textmsg("Invalid FT Waypoint and not sent")
  end 
  end 
  def ft_waypoint(fixP=ON_ZEROPOSE,variableP=p[0,0,0,0,0,0],relativeP=p[0,0,0,0,0,0]):
  sync()
  local mergedWP=ON_ZEROPOSE
  local startPose=ON_ZEROPOSE
  local frameID=ft_move_frameID
  if not(ft_move_state==FT_MOVE_STATE_INITED):
  textmsg("ft_move_state: ",ft_move_state)
  popup(ft_waypoint_move_state_error,title=ft_waypoint_error_title,error=True,blocking=False)
  halt
  end 
  if ft_move_path_count!=0:
  popup(ft_waypoint_path_count_error,title=ft_waypoint_error_title,error=True,blocking=False)
  halt
  end 
  if fixP==ON_ZEROPOSE:
  if variableP==ON_ZEROPOSE:
  if(relativeP==ON_ZEROPOSE):
  popup(ft_waypoint_parameter_error_target,title=ft_waypoint_error_title,error=True,blocking=False)
  halt
  end 
  if frameID==0:
  startPose=ft_move_last_pose
  elif frameID==1:
  startPose=ON_ZEROPOSE 
  elif frameID==2:
  startPose=pose_trans(pose_inv(ft_move_frame),ft_move_last_pose)
  elif frameID==3:
  startPose=pose_inv(ft_move_frame)
  else:
  startPose=ft_move_last_pose
  end 
  else:
  startPose=variableP
  end 
  mergedCustom=pose_add(relativeP,startPose)
  if frameID==0:
  mergedWP=mergedCustom
  elif frameID==1:
  mergedWP= pose_trans(ft_move_last_pose,mergedCustom)
  elif frameID==2:
  mergedWP=pose_trans(ft_move_frame,mergedCustom)
  elif frameID==3:
  local customMerged=pose_trans(ft_move_frame,mergedCustom)
  mergedWP=pose_trans(ft_move_last_pose,customMerged)
  end 
  else:
  mergedWP=fixP
  end 
  local poseDiff=point_dist(mergedWP,ft_move_last_pose)
  if((ft_move_wp_count!=0)and(poseDiff<ft_move_min_dist)):
  textmsg(ft_waypoint_parameter_error_distance,poseDiff)
  popup(ft_waypoint_parameter_error_close,title=ft_waypoint_error_title,error=True,blocking=False)
  halt
  else:
  ft_waypoint_send(mergedWP)
  end 
  ft_move_last_pose=mergedWP
  return mergedWP
  end 
  
  #======    End of OnRobot FT Move    ======#
  #======    OnRobot FT Path Messages    ======#
  
  ft_path_title="OnRobot - F/T Path"
  ft_path_error_title="OnRobot - F/T Path error"
  ft_path_move_state_error="Wrong program structure when initializing F/T Path.<br>Program halted.<br>Make sure that the F/T Path is under F/T Move or F/T Search in a right structure."
  ft_path_path_count_error="Incorrect use of F/T Path.<br>Do not use multiple F/T Paths in the same F/T Move or F/T Search.<br>Program halted."
  ft_path_wp_count_error="Incorrect use of F/T Path.<br>Do not use F/T Waypoint and F/T Path in the same F/T Move or F/T Search.<br>Program halted."
  ft_path_parameter_error_pathid="Parameter error.<br>Invalid F/T Path ID."
  ft_path_speedscale_warning="The F/T Path command is replayed properly only if the Speed Scale is set to 100%.<br>Press the 'Continue' button to continue with replaying at 100% Speed."
  
  #======    End of OnRobot FT Path Messages    ======#
  #======    OnRobot FT Path    ======#
  
  def ft_path(pathID):
  sync()
  if not(ft_move_state==FT_MOVE_STATE_INITED or ft_move_state==FT_MOVE_STATE_PATH_STOPPED):
  textmsg("ft_move_state: ",ft_move_state)
  popup(ft_path_move_state_error,title=ft_path_error_title,error=True,blocking=False)
  halt
  end 
  if not(ft_move_path_count==0):
  popup(ft_path_path_count_error,title=ft_path_error_title,error=True,blocking=False)
  halt
  end 
  if not((ft_move_wp_count==0 and not ft_move_path_move_home)or(ft_move_wp_count==1 or ft_move_path_move_home)):
  textmsg("Path home & Waypoint#: ",[binary_list_to_integer([ft_move_path_move_home]),ft_move_wp_count])
  popup(ft_path_wp_count_error,title=ft_path_error_title,error=True,blocking=False)
  halt
  end 
  if not(pathID>0 or pathID==-1):
  popup(ft_path_parameter_error_pathid,title=ft_path_error_title,error=True,blocking=False)
  halt
  end 
  ft_move_path_move_home=False
  on_xmlrpc.cb_move_path(pathID)
  ft_move_path_count=ft_move_path_count+1
  if ON_DEBUG_LOG:
  textmsg("FT Path sent: ",pathID)
  end 
  end 
  def ft_path_play(pathID=0,relative=False,homePose=ON_ZEROPOSE):
  if not(ft_move_state==FT_MOVE_STATE_INITED):
  textmsg("ft_move_state: ",ft_move_state)
  popup(ft_path_move_state_error,title=ft_path_error_title,error=True,blocking=False)
  halt
  end 
  if not(ft_move_path_count==0):
  popup(ft_path_path_count_error,title=ft_path_error_title,error=True,blocking=False)
  halt
  end 
  if not(ft_move_wp_count==0):
  textmsg("Path home & Waypoint#: ",[binary_list_to_integer([ft_move_path_move_home]),ft_move_wp_count])
  popup(ft_path_wp_count_error,title=ft_path_error_title,error=True,blocking=False)
  halt
  end 
  ft_move_path_return=0
  if relative:
  ft_move_path_move_home=False
  else:
  ft_move_path_move_home=True
  end 
  if not relative:
  ft_waypoint(fixP=homePose)
  ft_move_start_move(popupmsg=False)
  end 
  ft_path(pathID)
  end 
  
  #======    End of OnRobot FT Path    ======#
  #======    OnRobot FT Guard Messages    ======#
  
  ft_guard_title="OnRobot - F/T Guard"
  ft_guard_reached="The F/T Guard set limit has been reached. Program halted."
  
  #======    End of OnRobot FT Guard Messages    ======#
  #======    OnRobot FT Guard    ======#
  
  ft_peakFzScanner_flag=False
  ft_abs_Fz=0
  ft_abs0_Fz=False
  def ft_threshold_check(limitFT=ON_ZERO6D,selectLimit=ON_FALSE6D,absolute=True,frameID=1):
  local is_above_the_threshold=False
  local actualFT=ON_ZERO6D
  local i=0
  enter_critical
  while(i<6):
  if selectLimit[i]:
  
  actualFT[i]=(FT_Left[i]+FT_Right[i])/2
  
  if(absolute):
  limitFT[i]=norm(limitFT[i])
  actualFT[i]=norm(actualFT[i])
  elif(0>limitFT[i]):
  limitFT[i]=-limitFT[i]
  actualFT[i]=-actualFT[i]
  end 
  if(limitFT[i]<actualFT[i]):
  is_above_the_threshold=True
  end 
  end 
  i=i+1
  end 
  exit_critical
  return is_above_the_threshold
  end 
  def ft_guard_check(limitFT=ON_ZERO6D,limitF3D=0,limitT3D=0,absolute=False,frameID=1):
  local is_above_the_threshold=False
  local selectLimit=ON_FALSE6D
  local i=0
  while(i<6):
  if(limitFT[i]!=0.0):
  selectLimit[i]=True
  end 
  i=i+1
  end 
  is_above_the_threshold=ft_threshold_check(limitFT,selectLimit,absolute,frameID)
  enter_critical
  if(limitF3D!=0):
  local actualF3D=F3D
  if(limitF3D<actualF3D):
  is_above_the_threshold=True
  end 
  end 
  if(limitT3D!=0):
  local actualT3D=T3D
  if(limitT3D<actualT3D):
  is_above_the_threshold=True
  end 
  end 
  exit_critical
  return is_above_the_threshold
  end 
  
  #======    End of OnRobot FT Guard    ======#
  #======    OnRobot FT Insert Part Messages    ======#
  
  ft_insert_part_error_title="OnRobot - Insert Part error"
  ft_insert_part_state_error_start="Wrong F/T Insert Part status when initializing.<br>Another thread is using an F/T Insert Part command. Program halted."
  ft_insert_part_state_error_return="Wrong F/T Insert Part status when returning.<br>Another thread is using an F/T Insert Part command. Program halted."
  ft_insert_part_return_title="OnRobot - Insert Part"
  ft_insert_part_return_0="The insertion has reached the maximal insertion depth."
  ft_insert_part_return_1="The insertion bumped after the minimal insertion depth."
  ft_insert_part_return_2="The insertion slowed down after the minimal insertion depth."
  ft_insert_part_return_3="The insertion got stuck before the minimal insertion depth."
  ft_insert_part_return_4="The command has timed out after the minimal insertion depth."
  ft_insert_part_return_5="The command has timed out before the minimal insertion depth."
  ft_insert_part_return_6="The side-force/-torque limit has been reached after the minimal insertion depth."
  ft_insert_part_return_7="The side-force/-torque limit has been reached before the minimal insertion depth."
  ft_insert_part_return_8="Parameter error returned from the Compute Box.<br>Check the parameters for the F/T Insert Part command."
  ft_insert_part_return_unknown="F/T Insert Part finished with unknown return value."
  
  #======    End of OnRobot FT Insert Part Messages    ======#
  #======    OnRobot FT Insert Part    ======#
  
  ft_insert_part_state=0
  ft_insert_part_return=0
  ft_sensor_filter_insertpart_hex=6
  ft_insert_part_frameID=1
  ft_insert_part_frameID_default=1
  ft_insert_part_frameRPY=ON_ZERO3D
  ft_insert_part_frameRPY_default=ON_ZERO3D
  ft_insert_part_retAccept=[True,True,True,False,False,False,False,False,False]
  ft_insert_part_retAccept_default=[True,True,True,False,False,False,False,False,False]
  FT_INSERT_PART_STATE_IDLE=0
  FT_INSERT_PART_STATE_INIT=1
  FT_INSERT_PART_STATE_STARTED=2
  FT_INSERT_PART_STATE_RETURNING=3
  ft__insert_part_param_error_minDistZ="Please define parameter 'minDistZ' as a positive real number in meters!"
  ft__insert_part_param_error_forceZ="Please define parameter 'forceZ' as a positive number in Newtons!"
  ft__insert_part_param_error_maxDistZ="Please define parameter 'maxDistZ' as a positive real number in meters!"
  ft__insert_part_param_error_maxDistZ_minDistZ="Please define the parameters as 'maxDistZ' >= 'minDistZ'!"
  ft__insert_part_param_error_expSpeed="Please define parameter 'expSpeed' as a positive real number in meters!"
  ft__insert_part_param_error_deltaForce="Please define parameter 'deltaForce' as a positive number in Newtons!"
  ft__insert_part_param_error_timeOut="Please define parameter 'timeOut' as a positive number in seconds!"
  ft__insert_part_param_error_FTLimits="Please define parameter 'FTLimits' as a 6-element array of positive numbers in Newtons & Newton-meters!"
  ft__insert_part_param_error_PGainFxy="Please define parameter 'PGainFxy' as a positive real number!"
  ft__insert_part_param_error_PGainFz="Please define parameter 'PGainFz' as a positive real number!"
  ft__insert_part_param_error_PGainTxy="Please define parameter 'PGainTxy' as a positive real number!"
  ft__insert_part_param_error_PGainTz="Please define parameter 'PGainTz' as a positive real number!"
  def ft_insert_part(forceZ,minDistZ,maxDistZ=0.0,deltaForce=0.0,expSpeed=0.0,timeOut=0,compliance=[True,True,True,True,True,True],FTLimits=ON_ZERO6D,PGainFxy=1.0,PGainFz=1.0,PGainTxy=0.2,PGainTz=0.2,popupmsg=True):
  sync()
  if ON_DEBUG_LOG:
  textmsg("Insert Part starting..")
  end 
  if not(ft_insert_part_state==FT_INSERT_PART_STATE_IDLE):
  textmsg("ft_insert_part_state: ",ft_insert_part_state)
  popup(ft_insert_part_state_error_start,title=ft_insert_part_error_title,error=True,blocking=False)
  halt
  else:
  enter_critical
  ft_insert_part_state=FT_INSERT_PART_STATE_INIT
  exit_critical
  end 
  ft_insert_part_return=0
  if not(minDistZ>=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_minDistZ,title=ft_insert_part_error_title,error=True,blocking=True)
  elif not(forceZ!=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_forceZ,title=ft_insert_part_error_title,error=True,blocking=True)
  elif not(maxDistZ>=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_maxDistZ,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(maxDistZ>=minDistZ or maxDistZ==0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_maxDistZ_minDistZ,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(expSpeed>=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_expSpeed,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(deltaForce>=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_deltaForce,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(timeOut>=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_timeOut,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(FTLimits[0]>=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_FTLimits,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(FTLimits[1]>=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_FTLimits,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(FTLimits[3]>=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_FTLimits,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(FTLimits[4]>=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_FTLimits,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(FTLimits[5]>=0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_FTLimits,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(PGainFxy>0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_PGainFxy,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(PGainFz>0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_PGainFz,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(PGainTxy>0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_PGainTxy,title=ft_insert_part_error_title,error=True,blocking=False)
  elif not(PGainTz>0):
  ft_insert_part_return=8
  popup(ft__insert_part_param_error_PGainTz,title=ft_insert_part_error_title,error=True,blocking=False)
  end 
  if(ft_insert_part_return!=0):
  halt
  end 
  on_tcp_offset_send(get_tcp_offset())
  local retAccept=ft_insert_part_retAccept
  ft_insert_part_retAccept=ft_insert_part_retAccept_default
  local ft_compliance=compliance
  ft_compliance[2]=True
  local ft_threshold=[FTLimits[0],FTLimits[1],(forceZ+deltaForce),FTLimits[3],FTLimits[4],FTLimits[5]]
  i=0
  while i<6:
  if ft_compliance[i]:
  ft_threshold[i]=0
  end 
  i=i+1
  end 
  local flags=binary_list_to_integer(ft_compliance)+(ft_insert_part_frameID*64)
  ft_insert_part_frameID=ft_insert_part_frameID_default
  local ft_insert_part_frame=rpy2rotvec(ft_insert_part_frameRPY)
  ft_insert_part_frameRPY=ft_insert_part_frameRPY_default
  sync()
  ft_insert_part_return=ft_pin_insertion(minDistZ,forceZ,compliance,maxDistZ,expSpeed,deltaForce,timeOut,FTLimits,PGainFxy,PGainFz,PGainTxy,PGainTz)
  if ON_DEBUG_LOG:
  textmsg("Insert Part returned.")
  end 
  if ft_insert_part_return==0:
  if(popupmsg and(not retAccept[0])):
  popup(ft_insert_part_return_0,title=ft_insert_part_return_title,warning=True,blocking=True)
  end 
  elif ft_insert_part_return==1:
  if(popupmsg and(not retAccept[1])):
  popup(ft_insert_part_return_1,title=ft_insert_part_return_title,warning=True,blocking=True)
  end 
  elif ft_insert_part_return==2:
  if(popupmsg and(not retAccept[2])):
  popup(ft_insert_part_return_2,title=ft_insert_part_return_title,warning=True,blocking=True)
  end 
  elif ft_insert_part_return==3:
  if(popupmsg and(not retAccept[3])):
  popup(ft_insert_part_return_3,title=ft_insert_part_return_title,warning=True,blocking=True)
  end 
  elif ft_insert_part_return==4:
  if(popupmsg and(not retAccept[4])):
  popup(ft_insert_part_return_4,title=ft_insert_part_return_title,warning=True,blocking=True)
  end 
  elif ft_insert_part_return==5:
  if(popupmsg and(not retAccept[5])):
  popup(ft_insert_part_return_5,title=ft_insert_part_return_title,warning=True,blocking=True)
  end 
  elif ft_insert_part_return==6:
  if(popupmsg and(not retAccept[6])):
  popup(ft_insert_part_return_6,title=ft_insert_part_return_title,warning=True,blocking=True)
  end 
  elif ft_insert_part_return==7:
  if(popupmsg and(not retAccept[7])):
  popup(ft_insert_part_return_7,title=ft_insert_part_return_title,warning=True,blocking=True)
  end 
  else:
  popup(ft_insert_part_return_unknown,title=ft_insert_part_return_title,warning=True,blocking=True)
  end 
  enter_critical
  ft_insert_part_state=FT_INSERT_PART_STATE_IDLE
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("End of Insert Part.")
  end 
  return ft_insert_part_return 
  end 
  ft_peakFzScanner_flag=False
  ft_abs_Fz=0
  ft_abs0_Fz=False
  thread ft_peakFzScanner():
  ft_peakFzScanner_flag=True
  ft_abs_Fz=0
  while(ft_peakFzScanner_flag==True):
  local norm_Fz=norm(FT_Tool[2])
  if(ft_abs0_Fz):
  ft_abs_Fz=0
  ft_abs0_Fz=False
  elif(ft_abs_Fz<norm_Fz):
  ft_abs_Fz=norm_Fz
  end 
  sync()
  end 
  end 
  ft_fpid_i_pin=0.0
  ft_fpid_d_pin=0.0
  ft_fpid_i_pin_default=0.0
  ft_fpid_d_pin_default=0.0
  ft_tpid_i_pin=0.0
  ft_tpid_d_pin=0.0
  ft_tpid_i_pin_default=0.0
  ft_tpid_d_pin_default=0.0
  def ft_pin_insertion(minDistZ,forceZ,compliance=[True,True,True,True,True,True],maxDistZ=0,expSpeed=0,deltaForce=1,timeOut=0,FTLimits=[999,999,0,999,999,999],PGainFxy=1.0,PGainFz=1.0,PGainTxy=0.2,PGainTz=0.2):
  sync()
  local pinRet=0
  local frameID=1
  local startPose=get_actual_tcp_pose()
  if maxDistZ==0:
  maxDistZ=minDistZ
  end 
  local dist2Reach=maxDistZ
  sync()
  local selectThreshold=[False,False,False,False,False,False]
  local ft_select=compliance
  ft_select[2]=True
  local ft_values=[0.0,0.0,0.0,0.0,0.0,0.0]
  ft_values[2]=forceZ+0.0
  local i=0
  while(i<6):
  selectThreshold[i]=not(ft_select[i])
  i=i+1
  end 
  local pin_useTimeOut=True
  if timeOut==0:
  pin_useTimeOut=False
  end 
  local timeOut100ms=timeOut*10
  local deltaD=expSpeed/10
  ft_pin_currentDist=0
  local peakScanner=run ft_peakFzScanner() 
  sync()
  local pin_gainP=[PGainFxy,PGainFxy,PGainFz,PGainTxy,PGainTxy,PGainTz]
  local pin_gainI=[ft_fpid_i_pin,ft_fpid_i_pin,ft_fpid_i_pin,ft_tpid_i_pin,ft_tpid_i_pin,ft_tpid_i_pin]
  local pin_gainD=[ft_fpid_d_pin,ft_fpid_d_pin,ft_fpid_d_pin,ft_tpid_d_pin,ft_tpid_d_pin,ft_tpid_d_pin]
  if on_hex:
  on_xmlrpc.ft_sensor_filter(ft_sensor_filter_insertpart_hex)
  end 
  ft_ftcontrol_start(ft_select=ft_select,ft_values=ft_values,frameID=frameID,frameRPY=[0,0,0],gainP=pin_gainP,gainI=pin_gainI,gainD=pin_gainD)
  local cntr=0
  local leaveInsertion=False
  local bumpZeroPeak=True
  local pin_actual_pose=get_actual_tcp_pose()
  ft_pin_currentDist=point_dist(startPose,pin_actual_pose)
  local pin_last_pose=pin_actual_pose
  ft_actual_deltaD=deltaD
  while((ft_pin_currentDist<dist2Reach)and not leaveInsertion):
  on_wait_ms(100)
  pin_actual_pose=get_actual_tcp_pose()
  ft_pin_currentDist=point_dist(startPose,pin_actual_pose)
  ft_actual_deltaD=(ft_actual_deltaD+pose_dist(pin_last_pose,pin_actual_pose))/2
  if(ft_threshold_check(FTLimits,selectThreshold,True)):
  leaveInsertion=True
  if(ft_pin_currentDist<minDistZ):
  pinRet=7
  else:
  pinRet=6
  end 
  ft_ftcontrol_stop()
  elif(pin_useTimeOut and(cntr>timeOut100ms)):
  leaveInsertion=True
  if(ft_pin_currentDist<minDistZ):
  pinRet=5
  else:
  pinRet=4
  end
  ft_ftcontrol_stop()
  elif(ft_actual_deltaD<deltaD and cntr>=10):
  leaveInsertion=True
  if(ft_pin_currentDist<minDistZ):
  pinRet=3
  ft_ftcontrol_stop()
  else:
  pinRet=2
  end 
  elif(ft_pin_currentDist>=minDistZ):
  if bumpZeroPeak:
  bumpZeroPeak=False
  ft_abs0_Fz=True
  sync()
  else:
  if(ft_abs_Fz>norm(forceZ+deltaForce)and not ft_abs0_Fz):
  ft_peakFzScanner_flag=False
  leaveInsertion=True
  pinRet=1 
  end 
  end 
  end 
  pin_last_pose=pin_actual_pose
  cntr=cntr+1
  sync()
  end 
  ft_ftcontrol_stop()
  on_xmlrpc.ft_sensor_filter(ft_sensor_filter)
  ft_peakFzScanner_flag=False
  kill peakScanner
  ft_fpid_i_pin=ft_fpid_i_pin_default
  ft_fpid_d_pin=ft_fpid_d_pin_default
  ft_tpid_i_pin=ft_tpid_i_pin_default
  ft_tpid_d_pin=ft_tpid_d_pin_default
  return pinRet 
  end 
  
  #======    End of OnRobot FT Insert Part    ======#
  
  #======    End of OnRobot RG2-FT Proximity AVG Messages    ======#
  #======    OnRobot RG2-FT Proximity AVG    ======#
  
  rg2ft_proxi_avg_window_default=10
  rg2ft_proxi_avg_window=10
  rg2ft_proxi_avg_window_last=rg2ft_proxi_avg_window
  rg2ft__proxi_avg_window_error_title="OnRobot - Gripper Proximity"
  rg2ft__proxi_avg_window_error_windowSize="Please define parameter windowSize as a positive integer between 0 and 20."
  def rg2ft_proxi_avg_window_set(windowSize=10):
  sync()
  if ON_DEBUG_LOG:
  textmsg("Gripper Proxi Avg Window Set command starting..")
  end 
  windowSize=floor(windowSize+0.5)
  if not(windowSize>0 and windowSize<=20):
  popup(rg2ft__proxi_avg_window_error_windowSize,title=rg2ft__proxi_avg_window_error_title,error=True,blocking=False)
  halt
  end 
  rg2ft_proxi_avg_window_last=rg2ft_proxi_avg_window
  rg2ft_proxi_avg_window=windowSize
  on_xmlrpc.rg2ft_proxi_avg(windowSize)
  if ON_DEBUG_LOG:
  textmsg("Gripper Proxi Avg Window Set command ended.")
  end 
  end 
  def rg2ft_proxi_avg_window_reset_last():
  rg2ft_proxi_avg_window_set(rg2ft_proxi_avg_window_last)
  end 
  def rg2ft_proxi_avg_window_reset_default():
  rg2ft_proxi_avg_window_set(rg2ft_proxi_avg_window_default)
  end 
  
  #======    End of OnRobot RG2-FT Proximity AVG    ======#
  
  #======    End of OnRobot RG2-FT Width Filter Messages    ======#
  #======    OnRobot RG2-FT Width Filter    ======#
  
  rg2ft_width_filter=10
  rg2ft__width_filter_error_title="OnRobot - Gripper Proximity"
  rg2ft__width_filter_error_bufferSize="Please define parameter bufferSize as a positive integer between 0 and 20."
  def rg2ft_width_filter_set(bufferSize=10):
  sync()
  if ON_DEBUG_LOG:
  textmsg("Gripper Width filtering set command starting..")
  end 
  bufferSize=floor(bufferSize+0.5)
  if not(bufferSize>0 and bufferSize<=20):
  popup(rg2ft__width_filter_error_bufferSize,title=rg2ft__width_filter_error_title,error=True,blocking=False)
  halt
  end 
  rg2ft_width_filter=bufferSize
  on_xmlrpc.rg2ft_width_filter(bufferSize)
  if ON_DEBUG_LOG:
  textmsg("Gripper Width filtering set command stopping..")
  end 
  end 
  
  #======    End of OnRobot RG2-FT Width Filter    ======#
  # end: URCap Installation Node
  while (True):
    $ 1 "Robot Program"
    # begin: URCap Program Node
    #   Source: OnRobot, 5.2.0, OnRobot A/S
    #   Type: RG Grip
    $ 2 "RG Grip"
on_return = rg2ft_grip(99.9, 40.0, tool_index = 0, blocking = True, depth_comp = True, popupmsg = True)
rg2ft_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 3 "Wait: 1.0"
    sleep(1.0)
    # begin: URCap Program Node
    #   Source: OnRobot, 5.2.0, OnRobot A/S
    #   Type: RG Grip
    $ 4 "RG Grip"
on_return = rg2ft_grip(29.6, 40.0, tool_index = 0, blocking = True, depth_comp = True, popupmsg = True)
rg2ft_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 5 "Wait: 1.0"
    sleep(1.0)
    # begin: URCap Program Node
    #   Source: OnRobot, 5.2.0, OnRobot A/S
    #   Type: TCP
    $ 6 "TCP"
    on_tcp_set_actual_to(isPrimary = True)
    on_tcp_offset_forced_set_actual(isPrimary = 0)
    # end: URCap Program Node
  end
end
